"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type History {
  id: ID!
  owner: MasterChef!
  slpBalance: BigDecimal!
  slpAge: BigDecimal!
  slpAgeRemoved: BigDecimal!
  slpDeposited: BigDecimal!
  slpWithdrawn: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
}

input History_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: MasterChef_filter
  slpBalance: BigDecimal
  slpBalance_not: BigDecimal
  slpBalance_gt: BigDecimal
  slpBalance_lt: BigDecimal
  slpBalance_gte: BigDecimal
  slpBalance_lte: BigDecimal
  slpBalance_in: [BigDecimal!]
  slpBalance_not_in: [BigDecimal!]
  slpAge: BigDecimal
  slpAge_not: BigDecimal
  slpAge_gt: BigDecimal
  slpAge_lt: BigDecimal
  slpAge_gte: BigDecimal
  slpAge_lte: BigDecimal
  slpAge_in: [BigDecimal!]
  slpAge_not_in: [BigDecimal!]
  slpAgeRemoved: BigDecimal
  slpAgeRemoved_not: BigDecimal
  slpAgeRemoved_gt: BigDecimal
  slpAgeRemoved_lt: BigDecimal
  slpAgeRemoved_gte: BigDecimal
  slpAgeRemoved_lte: BigDecimal
  slpAgeRemoved_in: [BigDecimal!]
  slpAgeRemoved_not_in: [BigDecimal!]
  slpDeposited: BigDecimal
  slpDeposited_not: BigDecimal
  slpDeposited_gt: BigDecimal
  slpDeposited_lt: BigDecimal
  slpDeposited_gte: BigDecimal
  slpDeposited_lte: BigDecimal
  slpDeposited_in: [BigDecimal!]
  slpDeposited_not_in: [BigDecimal!]
  slpWithdrawn: BigDecimal
  slpWithdrawn_not: BigDecimal
  slpWithdrawn_gt: BigDecimal
  slpWithdrawn_lt: BigDecimal
  slpWithdrawn_gte: BigDecimal
  slpWithdrawn_lte: BigDecimal
  slpWithdrawn_in: [BigDecimal!]
  slpWithdrawn_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [History_filter]
  or: [History_filter]
}

enum History_orderBy {
  id
  owner
  owner__id
  owner__bonusMultiplier
  owner__bonusEndBlock
  owner__devaddr
  owner__migrator
  owner__owner
  owner__startBlock
  owner__sushi
  owner__sushiPerBlock
  owner__totalAllocPoint
  owner__poolCount
  owner__slpBalance
  owner__slpAge
  owner__slpAgeRemoved
  owner__slpDeposited
  owner__slpWithdrawn
  owner__updatedAt
  slpBalance
  slpAge
  slpAgeRemoved
  slpDeposited
  slpWithdrawn
  timestamp
  block
}

"8 bytes signed integer\n"
scalar Int8

type MasterChef {
  id: ID!
  bonusMultiplier: BigInt!
  bonusEndBlock: BigInt!
  devaddr: Bytes!
  migrator: Bytes!
  owner: Bytes!
  startBlock: BigInt!
  sushi: Bytes!
  sushiPerBlock: BigInt!
  totalAllocPoint: BigInt!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
  poolCount: BigInt!
  slpBalance: BigDecimal!
  slpAge: BigDecimal!
  slpAgeRemoved: BigDecimal!
  slpDeposited: BigDecimal!
  slpWithdrawn: BigDecimal!
  history(skip: Int = 0, first: Int = 100, orderBy: History_orderBy, orderDirection: OrderDirection, where: History_filter): [History!]!
  updatedAt: BigInt!
}

input MasterChef_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bonusMultiplier: BigInt
  bonusMultiplier_not: BigInt
  bonusMultiplier_gt: BigInt
  bonusMultiplier_lt: BigInt
  bonusMultiplier_gte: BigInt
  bonusMultiplier_lte: BigInt
  bonusMultiplier_in: [BigInt!]
  bonusMultiplier_not_in: [BigInt!]
  bonusEndBlock: BigInt
  bonusEndBlock_not: BigInt
  bonusEndBlock_gt: BigInt
  bonusEndBlock_lt: BigInt
  bonusEndBlock_gte: BigInt
  bonusEndBlock_lte: BigInt
  bonusEndBlock_in: [BigInt!]
  bonusEndBlock_not_in: [BigInt!]
  devaddr: Bytes
  devaddr_not: Bytes
  devaddr_gt: Bytes
  devaddr_lt: Bytes
  devaddr_gte: Bytes
  devaddr_lte: Bytes
  devaddr_in: [Bytes!]
  devaddr_not_in: [Bytes!]
  devaddr_contains: Bytes
  devaddr_not_contains: Bytes
  migrator: Bytes
  migrator_not: Bytes
  migrator_gt: Bytes
  migrator_lt: Bytes
  migrator_gte: Bytes
  migrator_lte: Bytes
  migrator_in: [Bytes!]
  migrator_not_in: [Bytes!]
  migrator_contains: Bytes
  migrator_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  startBlock: BigInt
  startBlock_not: BigInt
  startBlock_gt: BigInt
  startBlock_lt: BigInt
  startBlock_gte: BigInt
  startBlock_lte: BigInt
  startBlock_in: [BigInt!]
  startBlock_not_in: [BigInt!]
  sushi: Bytes
  sushi_not: Bytes
  sushi_gt: Bytes
  sushi_lt: Bytes
  sushi_gte: Bytes
  sushi_lte: Bytes
  sushi_in: [Bytes!]
  sushi_not_in: [Bytes!]
  sushi_contains: Bytes
  sushi_not_contains: Bytes
  sushiPerBlock: BigInt
  sushiPerBlock_not: BigInt
  sushiPerBlock_gt: BigInt
  sushiPerBlock_lt: BigInt
  sushiPerBlock_gte: BigInt
  sushiPerBlock_lte: BigInt
  sushiPerBlock_in: [BigInt!]
  sushiPerBlock_not_in: [BigInt!]
  totalAllocPoint: BigInt
  totalAllocPoint_not: BigInt
  totalAllocPoint_gt: BigInt
  totalAllocPoint_lt: BigInt
  totalAllocPoint_gte: BigInt
  totalAllocPoint_lte: BigInt
  totalAllocPoint_in: [BigInt!]
  totalAllocPoint_not_in: [BigInt!]
  pools_: Pool_filter
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  slpBalance: BigDecimal
  slpBalance_not: BigDecimal
  slpBalance_gt: BigDecimal
  slpBalance_lt: BigDecimal
  slpBalance_gte: BigDecimal
  slpBalance_lte: BigDecimal
  slpBalance_in: [BigDecimal!]
  slpBalance_not_in: [BigDecimal!]
  slpAge: BigDecimal
  slpAge_not: BigDecimal
  slpAge_gt: BigDecimal
  slpAge_lt: BigDecimal
  slpAge_gte: BigDecimal
  slpAge_lte: BigDecimal
  slpAge_in: [BigDecimal!]
  slpAge_not_in: [BigDecimal!]
  slpAgeRemoved: BigDecimal
  slpAgeRemoved_not: BigDecimal
  slpAgeRemoved_gt: BigDecimal
  slpAgeRemoved_lt: BigDecimal
  slpAgeRemoved_gte: BigDecimal
  slpAgeRemoved_lte: BigDecimal
  slpAgeRemoved_in: [BigDecimal!]
  slpAgeRemoved_not_in: [BigDecimal!]
  slpDeposited: BigDecimal
  slpDeposited_not: BigDecimal
  slpDeposited_gt: BigDecimal
  slpDeposited_lt: BigDecimal
  slpDeposited_gte: BigDecimal
  slpDeposited_lte: BigDecimal
  slpDeposited_in: [BigDecimal!]
  slpDeposited_not_in: [BigDecimal!]
  slpWithdrawn: BigDecimal
  slpWithdrawn_not: BigDecimal
  slpWithdrawn_gt: BigDecimal
  slpWithdrawn_lt: BigDecimal
  slpWithdrawn_gte: BigDecimal
  slpWithdrawn_lte: BigDecimal
  slpWithdrawn_in: [BigDecimal!]
  slpWithdrawn_not_in: [BigDecimal!]
  history_: History_filter
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChef_filter]
  or: [MasterChef_filter]
}

enum MasterChef_orderBy {
  id
  bonusMultiplier
  bonusEndBlock
  devaddr
  migrator
  owner
  startBlock
  sushi
  sushiPerBlock
  totalAllocPoint
  pools
  poolCount
  slpBalance
  slpAge
  slpAgeRemoved
  slpDeposited
  slpWithdrawn
  history
  updatedAt
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pool {
  id: ID!
  owner: MasterChef!
  pair: Bytes!
  allocPoint: BigInt!
  lastRewardBlock: BigInt!
  accSushiPerShare: BigInt!
  balance: BigInt!
  users(skip: Int = 0, first: Int = 100, orderBy: User_orderBy, orderDirection: OrderDirection, where: User_filter): [User!]!
  userCount: BigInt!
  slpBalance: BigDecimal!
  slpAge: BigDecimal!
  slpAgeRemoved: BigDecimal!
  slpDeposited: BigDecimal!
  slpWithdrawn: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
  updatedAt: BigInt!
  entryUSD: BigDecimal!
  exitUSD: BigDecimal!
  sushiHarvested: BigDecimal!
  sushiHarvestedUSD: BigDecimal!
}

type PoolHistory {
  id: ID!
  pool: Pool!
  slpBalance: BigDecimal!
  slpAge: BigDecimal!
  slpAgeRemoved: BigDecimal!
  slpDeposited: BigDecimal!
  slpWithdrawn: BigDecimal!
  userCount: BigInt!
  timestamp: BigInt!
  block: BigInt!
  entryUSD: BigDecimal!
  exitUSD: BigDecimal!
  sushiHarvested: BigDecimal!
  sushiHarvestedUSD: BigDecimal!
}

input PoolHistory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  slpBalance: BigDecimal
  slpBalance_not: BigDecimal
  slpBalance_gt: BigDecimal
  slpBalance_lt: BigDecimal
  slpBalance_gte: BigDecimal
  slpBalance_lte: BigDecimal
  slpBalance_in: [BigDecimal!]
  slpBalance_not_in: [BigDecimal!]
  slpAge: BigDecimal
  slpAge_not: BigDecimal
  slpAge_gt: BigDecimal
  slpAge_lt: BigDecimal
  slpAge_gte: BigDecimal
  slpAge_lte: BigDecimal
  slpAge_in: [BigDecimal!]
  slpAge_not_in: [BigDecimal!]
  slpAgeRemoved: BigDecimal
  slpAgeRemoved_not: BigDecimal
  slpAgeRemoved_gt: BigDecimal
  slpAgeRemoved_lt: BigDecimal
  slpAgeRemoved_gte: BigDecimal
  slpAgeRemoved_lte: BigDecimal
  slpAgeRemoved_in: [BigDecimal!]
  slpAgeRemoved_not_in: [BigDecimal!]
  slpDeposited: BigDecimal
  slpDeposited_not: BigDecimal
  slpDeposited_gt: BigDecimal
  slpDeposited_lt: BigDecimal
  slpDeposited_gte: BigDecimal
  slpDeposited_lte: BigDecimal
  slpDeposited_in: [BigDecimal!]
  slpDeposited_not_in: [BigDecimal!]
  slpWithdrawn: BigDecimal
  slpWithdrawn_not: BigDecimal
  slpWithdrawn_gt: BigDecimal
  slpWithdrawn_lt: BigDecimal
  slpWithdrawn_gte: BigDecimal
  slpWithdrawn_lte: BigDecimal
  slpWithdrawn_in: [BigDecimal!]
  slpWithdrawn_not_in: [BigDecimal!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  entryUSD: BigDecimal
  entryUSD_not: BigDecimal
  entryUSD_gt: BigDecimal
  entryUSD_lt: BigDecimal
  entryUSD_gte: BigDecimal
  entryUSD_lte: BigDecimal
  entryUSD_in: [BigDecimal!]
  entryUSD_not_in: [BigDecimal!]
  exitUSD: BigDecimal
  exitUSD_not: BigDecimal
  exitUSD_gt: BigDecimal
  exitUSD_lt: BigDecimal
  exitUSD_gte: BigDecimal
  exitUSD_lte: BigDecimal
  exitUSD_in: [BigDecimal!]
  exitUSD_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  sushiHarvestedUSD: BigDecimal
  sushiHarvestedUSD_not: BigDecimal
  sushiHarvestedUSD_gt: BigDecimal
  sushiHarvestedUSD_lt: BigDecimal
  sushiHarvestedUSD_gte: BigDecimal
  sushiHarvestedUSD_lte: BigDecimal
  sushiHarvestedUSD_in: [BigDecimal!]
  sushiHarvestedUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolHistory_filter]
  or: [PoolHistory_filter]
}

enum PoolHistory_orderBy {
  id
  pool
  pool__id
  pool__pair
  pool__allocPoint
  pool__lastRewardBlock
  pool__accSushiPerShare
  pool__balance
  pool__userCount
  pool__slpBalance
  pool__slpAge
  pool__slpAgeRemoved
  pool__slpDeposited
  pool__slpWithdrawn
  pool__timestamp
  pool__block
  pool__updatedAt
  pool__entryUSD
  pool__exitUSD
  pool__sushiHarvested
  pool__sushiHarvestedUSD
  slpBalance
  slpAge
  slpAgeRemoved
  slpDeposited
  slpWithdrawn
  userCount
  timestamp
  block
  entryUSD
  exitUSD
  sushiHarvested
  sushiHarvestedUSD
}

input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: MasterChef_filter
  pair: Bytes
  pair_not: Bytes
  pair_gt: Bytes
  pair_lt: Bytes
  pair_gte: Bytes
  pair_lte: Bytes
  pair_in: [Bytes!]
  pair_not_in: [Bytes!]
  pair_contains: Bytes
  pair_not_contains: Bytes
  allocPoint: BigInt
  allocPoint_not: BigInt
  allocPoint_gt: BigInt
  allocPoint_lt: BigInt
  allocPoint_gte: BigInt
  allocPoint_lte: BigInt
  allocPoint_in: [BigInt!]
  allocPoint_not_in: [BigInt!]
  lastRewardBlock: BigInt
  lastRewardBlock_not: BigInt
  lastRewardBlock_gt: BigInt
  lastRewardBlock_lt: BigInt
  lastRewardBlock_gte: BigInt
  lastRewardBlock_lte: BigInt
  lastRewardBlock_in: [BigInt!]
  lastRewardBlock_not_in: [BigInt!]
  accSushiPerShare: BigInt
  accSushiPerShare_not: BigInt
  accSushiPerShare_gt: BigInt
  accSushiPerShare_lt: BigInt
  accSushiPerShare_gte: BigInt
  accSushiPerShare_lte: BigInt
  accSushiPerShare_in: [BigInt!]
  accSushiPerShare_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  users_: User_filter
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  slpBalance: BigDecimal
  slpBalance_not: BigDecimal
  slpBalance_gt: BigDecimal
  slpBalance_lt: BigDecimal
  slpBalance_gte: BigDecimal
  slpBalance_lte: BigDecimal
  slpBalance_in: [BigDecimal!]
  slpBalance_not_in: [BigDecimal!]
  slpAge: BigDecimal
  slpAge_not: BigDecimal
  slpAge_gt: BigDecimal
  slpAge_lt: BigDecimal
  slpAge_gte: BigDecimal
  slpAge_lte: BigDecimal
  slpAge_in: [BigDecimal!]
  slpAge_not_in: [BigDecimal!]
  slpAgeRemoved: BigDecimal
  slpAgeRemoved_not: BigDecimal
  slpAgeRemoved_gt: BigDecimal
  slpAgeRemoved_lt: BigDecimal
  slpAgeRemoved_gte: BigDecimal
  slpAgeRemoved_lte: BigDecimal
  slpAgeRemoved_in: [BigDecimal!]
  slpAgeRemoved_not_in: [BigDecimal!]
  slpDeposited: BigDecimal
  slpDeposited_not: BigDecimal
  slpDeposited_gt: BigDecimal
  slpDeposited_lt: BigDecimal
  slpDeposited_gte: BigDecimal
  slpDeposited_lte: BigDecimal
  slpDeposited_in: [BigDecimal!]
  slpDeposited_not_in: [BigDecimal!]
  slpWithdrawn: BigDecimal
  slpWithdrawn_not: BigDecimal
  slpWithdrawn_gt: BigDecimal
  slpWithdrawn_lt: BigDecimal
  slpWithdrawn_gte: BigDecimal
  slpWithdrawn_lte: BigDecimal
  slpWithdrawn_in: [BigDecimal!]
  slpWithdrawn_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  entryUSD: BigDecimal
  entryUSD_not: BigDecimal
  entryUSD_gt: BigDecimal
  entryUSD_lt: BigDecimal
  entryUSD_gte: BigDecimal
  entryUSD_lte: BigDecimal
  entryUSD_in: [BigDecimal!]
  entryUSD_not_in: [BigDecimal!]
  exitUSD: BigDecimal
  exitUSD_not: BigDecimal
  exitUSD_gt: BigDecimal
  exitUSD_lt: BigDecimal
  exitUSD_gte: BigDecimal
  exitUSD_lte: BigDecimal
  exitUSD_in: [BigDecimal!]
  exitUSD_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  sushiHarvestedUSD: BigDecimal
  sushiHarvestedUSD_not: BigDecimal
  sushiHarvestedUSD_gt: BigDecimal
  sushiHarvestedUSD_lt: BigDecimal
  sushiHarvestedUSD_gte: BigDecimal
  sushiHarvestedUSD_lte: BigDecimal
  sushiHarvestedUSD_in: [BigDecimal!]
  sushiHarvestedUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  owner
  owner__id
  owner__bonusMultiplier
  owner__bonusEndBlock
  owner__devaddr
  owner__migrator
  owner__owner
  owner__startBlock
  owner__sushi
  owner__sushiPerBlock
  owner__totalAllocPoint
  owner__poolCount
  owner__slpBalance
  owner__slpAge
  owner__slpAgeRemoved
  owner__slpDeposited
  owner__slpWithdrawn
  owner__updatedAt
  pair
  allocPoint
  lastRewardBlock
  accSushiPerShare
  balance
  users
  userCount
  slpBalance
  slpAge
  slpAgeRemoved
  slpDeposited
  slpWithdrawn
  timestamp
  block
  updatedAt
  entryUSD
  exitUSD
  sushiHarvested
  sushiHarvestedUSD
}

type Query {
  masterChef(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChef
  masterChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChef_orderBy
    orderDirection: OrderDirection
    where: MasterChef_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChef!]!
  history(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): History
  histories(
    skip: Int = 0
    first: Int = 100
    orderBy: History_orderBy
    orderDirection: OrderDirection
    where: History_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [History!]!
  pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolHistory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHistory
  poolHistories(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHistory_orderBy
    orderDirection: OrderDirection
    where: PoolHistory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHistory!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  masterChef(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChef
  masterChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChef_orderBy
    orderDirection: OrderDirection
    where: MasterChef_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChef!]!
  history(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): History
  histories(
    skip: Int = 0
    first: Int = 100
    orderBy: History_orderBy
    orderDirection: OrderDirection
    where: History_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [History!]!
  pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolHistory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHistory
  poolHistories(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHistory_orderBy
    orderDirection: OrderDirection
    where: PoolHistory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHistory!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"A string representation of microseconds UNIX timestamp (16 digits)\n"
scalar Timestamp

type User {
  id: ID!
  address: Bytes!
  pool: Pool
  amount: BigInt!
  rewardDebt: BigInt!
  entryUSD: BigDecimal!
  exitUSD: BigDecimal!
  sushiHarvested: BigDecimal!
  sushiHarvestedUSD: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  rewardDebt: BigInt
  rewardDebt_not: BigInt
  rewardDebt_gt: BigInt
  rewardDebt_lt: BigInt
  rewardDebt_gte: BigInt
  rewardDebt_lte: BigInt
  rewardDebt_in: [BigInt!]
  rewardDebt_not_in: [BigInt!]
  entryUSD: BigDecimal
  entryUSD_not: BigDecimal
  entryUSD_gt: BigDecimal
  entryUSD_lt: BigDecimal
  entryUSD_gte: BigDecimal
  entryUSD_lte: BigDecimal
  entryUSD_in: [BigDecimal!]
  entryUSD_not_in: [BigDecimal!]
  exitUSD: BigDecimal
  exitUSD_not: BigDecimal
  exitUSD_gt: BigDecimal
  exitUSD_lt: BigDecimal
  exitUSD_gte: BigDecimal
  exitUSD_lte: BigDecimal
  exitUSD_in: [BigDecimal!]
  exitUSD_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  sushiHarvestedUSD: BigDecimal
  sushiHarvestedUSD_not: BigDecimal
  sushiHarvestedUSD_gt: BigDecimal
  sushiHarvestedUSD_lt: BigDecimal
  sushiHarvestedUSD_gte: BigDecimal
  sushiHarvestedUSD_lte: BigDecimal
  sushiHarvestedUSD_in: [BigDecimal!]
  sushiHarvestedUSD_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  address
  pool
  pool__id
  pool__pair
  pool__allocPoint
  pool__lastRewardBlock
  pool__accSushiPerShare
  pool__balance
  pool__userCount
  pool__slpBalance
  pool__slpAge
  pool__slpAgeRemoved
  pool__slpDeposited
  pool__slpWithdrawn
  pool__timestamp
  pool__block
  pool__updatedAt
  pool__entryUSD
  pool__exitUSD
  pool__sushiHarvested
  pool__sushiHarvestedUSD
  amount
  rewardDebt
  entryUSD
  exitUSD
  sushiHarvested
  sushiHarvestedUSD
  timestamp
  block
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}