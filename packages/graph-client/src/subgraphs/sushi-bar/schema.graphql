"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type DaySnapshot {
  """ {day}-{date} """
  id: ID!
  date: Int!
  userCount: BigInt!
  transactionCount: BigInt!
  sushiSupply: BigDecimal!
  xSushiSupply: BigDecimal!
  sushiStaked: BigDecimal!
  sushiHarvested: BigDecimal!
  totalFeeAmount: BigDecimal!
  xSushiBurned: BigDecimal!
  xSushiMinted: BigDecimal!
  xSushiSushiRatio: BigDecimal!
  sushiXsushiRatio: BigDecimal!
  apr1m: BigDecimal!
  apr3m: BigDecimal!
  apr6m: BigDecimal!
  apr12m: BigDecimal!
  newTransactions: BigInt!
  newSushiStaked: BigDecimal!
  newSushiHarvested: BigDecimal!
  newFeeAmount: BigDecimal!
  newXSushiBurned: BigDecimal!
  newXSushiMinted: BigDecimal!
}

input DaySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  sushiSupply: BigDecimal
  sushiSupply_not: BigDecimal
  sushiSupply_gt: BigDecimal
  sushiSupply_lt: BigDecimal
  sushiSupply_gte: BigDecimal
  sushiSupply_lte: BigDecimal
  sushiSupply_in: [BigDecimal!]
  sushiSupply_not_in: [BigDecimal!]
  xSushiSupply: BigDecimal
  xSushiSupply_not: BigDecimal
  xSushiSupply_gt: BigDecimal
  xSushiSupply_lt: BigDecimal
  xSushiSupply_gte: BigDecimal
  xSushiSupply_lte: BigDecimal
  xSushiSupply_in: [BigDecimal!]
  xSushiSupply_not_in: [BigDecimal!]
  sushiStaked: BigDecimal
  sushiStaked_not: BigDecimal
  sushiStaked_gt: BigDecimal
  sushiStaked_lt: BigDecimal
  sushiStaked_gte: BigDecimal
  sushiStaked_lte: BigDecimal
  sushiStaked_in: [BigDecimal!]
  sushiStaked_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  totalFeeAmount: BigDecimal
  totalFeeAmount_not: BigDecimal
  totalFeeAmount_gt: BigDecimal
  totalFeeAmount_lt: BigDecimal
  totalFeeAmount_gte: BigDecimal
  totalFeeAmount_lte: BigDecimal
  totalFeeAmount_in: [BigDecimal!]
  totalFeeAmount_not_in: [BigDecimal!]
  xSushiBurned: BigDecimal
  xSushiBurned_not: BigDecimal
  xSushiBurned_gt: BigDecimal
  xSushiBurned_lt: BigDecimal
  xSushiBurned_gte: BigDecimal
  xSushiBurned_lte: BigDecimal
  xSushiBurned_in: [BigDecimal!]
  xSushiBurned_not_in: [BigDecimal!]
  xSushiMinted: BigDecimal
  xSushiMinted_not: BigDecimal
  xSushiMinted_gt: BigDecimal
  xSushiMinted_lt: BigDecimal
  xSushiMinted_gte: BigDecimal
  xSushiMinted_lte: BigDecimal
  xSushiMinted_in: [BigDecimal!]
  xSushiMinted_not_in: [BigDecimal!]
  xSushiSushiRatio: BigDecimal
  xSushiSushiRatio_not: BigDecimal
  xSushiSushiRatio_gt: BigDecimal
  xSushiSushiRatio_lt: BigDecimal
  xSushiSushiRatio_gte: BigDecimal
  xSushiSushiRatio_lte: BigDecimal
  xSushiSushiRatio_in: [BigDecimal!]
  xSushiSushiRatio_not_in: [BigDecimal!]
  sushiXsushiRatio: BigDecimal
  sushiXsushiRatio_not: BigDecimal
  sushiXsushiRatio_gt: BigDecimal
  sushiXsushiRatio_lt: BigDecimal
  sushiXsushiRatio_gte: BigDecimal
  sushiXsushiRatio_lte: BigDecimal
  sushiXsushiRatio_in: [BigDecimal!]
  sushiXsushiRatio_not_in: [BigDecimal!]
  apr1m: BigDecimal
  apr1m_not: BigDecimal
  apr1m_gt: BigDecimal
  apr1m_lt: BigDecimal
  apr1m_gte: BigDecimal
  apr1m_lte: BigDecimal
  apr1m_in: [BigDecimal!]
  apr1m_not_in: [BigDecimal!]
  apr3m: BigDecimal
  apr3m_not: BigDecimal
  apr3m_gt: BigDecimal
  apr3m_lt: BigDecimal
  apr3m_gte: BigDecimal
  apr3m_lte: BigDecimal
  apr3m_in: [BigDecimal!]
  apr3m_not_in: [BigDecimal!]
  apr6m: BigDecimal
  apr6m_not: BigDecimal
  apr6m_gt: BigDecimal
  apr6m_lt: BigDecimal
  apr6m_gte: BigDecimal
  apr6m_lte: BigDecimal
  apr6m_in: [BigDecimal!]
  apr6m_not_in: [BigDecimal!]
  apr12m: BigDecimal
  apr12m_not: BigDecimal
  apr12m_gt: BigDecimal
  apr12m_lt: BigDecimal
  apr12m_gte: BigDecimal
  apr12m_lte: BigDecimal
  apr12m_in: [BigDecimal!]
  apr12m_not_in: [BigDecimal!]
  newTransactions: BigInt
  newTransactions_not: BigInt
  newTransactions_gt: BigInt
  newTransactions_lt: BigInt
  newTransactions_gte: BigInt
  newTransactions_lte: BigInt
  newTransactions_in: [BigInt!]
  newTransactions_not_in: [BigInt!]
  newSushiStaked: BigDecimal
  newSushiStaked_not: BigDecimal
  newSushiStaked_gt: BigDecimal
  newSushiStaked_lt: BigDecimal
  newSushiStaked_gte: BigDecimal
  newSushiStaked_lte: BigDecimal
  newSushiStaked_in: [BigDecimal!]
  newSushiStaked_not_in: [BigDecimal!]
  newSushiHarvested: BigDecimal
  newSushiHarvested_not: BigDecimal
  newSushiHarvested_gt: BigDecimal
  newSushiHarvested_lt: BigDecimal
  newSushiHarvested_gte: BigDecimal
  newSushiHarvested_lte: BigDecimal
  newSushiHarvested_in: [BigDecimal!]
  newSushiHarvested_not_in: [BigDecimal!]
  newFeeAmount: BigDecimal
  newFeeAmount_not: BigDecimal
  newFeeAmount_gt: BigDecimal
  newFeeAmount_lt: BigDecimal
  newFeeAmount_gte: BigDecimal
  newFeeAmount_lte: BigDecimal
  newFeeAmount_in: [BigDecimal!]
  newFeeAmount_not_in: [BigDecimal!]
  newXSushiBurned: BigDecimal
  newXSushiBurned_not: BigDecimal
  newXSushiBurned_gt: BigDecimal
  newXSushiBurned_lt: BigDecimal
  newXSushiBurned_gte: BigDecimal
  newXSushiBurned_lte: BigDecimal
  newXSushiBurned_in: [BigDecimal!]
  newXSushiBurned_not_in: [BigDecimal!]
  newXSushiMinted: BigDecimal
  newXSushiMinted_not: BigDecimal
  newXSushiMinted_gt: BigDecimal
  newXSushiMinted_lt: BigDecimal
  newXSushiMinted_gte: BigDecimal
  newXSushiMinted_lte: BigDecimal
  newXSushiMinted_in: [BigDecimal!]
  newXSushiMinted_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DaySnapshot_filter]
  or: [DaySnapshot_filter]
}

enum DaySnapshot_orderBy {
  id
  date
  userCount
  transactionCount
  sushiSupply
  xSushiSupply
  sushiStaked
  sushiHarvested
  totalFeeAmount
  xSushiBurned
  xSushiMinted
  xSushiSushiRatio
  sushiXsushiRatio
  apr1m
  apr3m
  apr6m
  apr12m
  newTransactions
  newSushiStaked
  newSushiHarvested
  newFeeAmount
  newXSushiBurned
  newXSushiMinted
}

type Fee {
  id: ID!
  sender: FeeSender!
  amount: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
}

type FeeSender {
  id: ID!
  totalFeeSent: BigInt!
  fees(skip: Int = 0, first: Int = 100, orderBy: Fee_orderBy, orderDirection: OrderDirection, where: Fee_filter): [Fee!]!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
}

input FeeSender_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalFeeSent: BigInt
  totalFeeSent_not: BigInt
  totalFeeSent_gt: BigInt
  totalFeeSent_lt: BigInt
  totalFeeSent_gte: BigInt
  totalFeeSent_lte: BigInt
  totalFeeSent_in: [BigInt!]
  totalFeeSent_not_in: [BigInt!]
  fees_: Fee_filter
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  modifiedAtBlock: BigInt
  modifiedAtBlock_not: BigInt
  modifiedAtBlock_gt: BigInt
  modifiedAtBlock_lt: BigInt
  modifiedAtBlock_gte: BigInt
  modifiedAtBlock_lte: BigInt
  modifiedAtBlock_in: [BigInt!]
  modifiedAtBlock_not_in: [BigInt!]
  modifiedAtTimestamp: BigInt
  modifiedAtTimestamp_not: BigInt
  modifiedAtTimestamp_gt: BigInt
  modifiedAtTimestamp_lt: BigInt
  modifiedAtTimestamp_gte: BigInt
  modifiedAtTimestamp_lte: BigInt
  modifiedAtTimestamp_in: [BigInt!]
  modifiedAtTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeeSender_filter]
  or: [FeeSender_filter]
}

enum FeeSender_orderBy {
  id
  totalFeeSent
  fees
  createdAtBlock
  createdAtTimestamp
  modifiedAtBlock
  modifiedAtTimestamp
}

input Fee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: FeeSender_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Fee_filter]
  or: [Fee_filter]
}

enum Fee_orderBy {
  id
  sender
  sender__id
  sender__totalFeeSent
  sender__createdAtBlock
  sender__createdAtTimestamp
  sender__modifiedAtBlock
  sender__modifiedAtTimestamp
  amount
  createdAtBlock
  createdAtTimestamp
}

type HourSnapshot {
  """ {hour}-{date} """
  id: ID!
  date: Int!
  userCount: BigInt!
  transactionCount: BigInt!
  sushiSupply: BigDecimal!
  xSushiSupply: BigDecimal!
  sushiStaked: BigDecimal!
  sushiHarvested: BigDecimal!
  totalFeeAmount: BigDecimal!
  xSushiBurned: BigDecimal!
  xSushiMinted: BigDecimal!
  xSushiSushiRatio: BigDecimal!
  sushiXsushiRatio: BigDecimal!
  apr1m: BigDecimal!
  apr3m: BigDecimal!
  apr6m: BigDecimal!
  apr12m: BigDecimal!
  newTransactions: BigInt!
  newSushiStaked: BigDecimal!
  newSushiHarvested: BigDecimal!
  newFeeAmount: BigDecimal!
  newXSushiBurned: BigDecimal!
  newXSushiMinted: BigDecimal!
}

input HourSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  sushiSupply: BigDecimal
  sushiSupply_not: BigDecimal
  sushiSupply_gt: BigDecimal
  sushiSupply_lt: BigDecimal
  sushiSupply_gte: BigDecimal
  sushiSupply_lte: BigDecimal
  sushiSupply_in: [BigDecimal!]
  sushiSupply_not_in: [BigDecimal!]
  xSushiSupply: BigDecimal
  xSushiSupply_not: BigDecimal
  xSushiSupply_gt: BigDecimal
  xSushiSupply_lt: BigDecimal
  xSushiSupply_gte: BigDecimal
  xSushiSupply_lte: BigDecimal
  xSushiSupply_in: [BigDecimal!]
  xSushiSupply_not_in: [BigDecimal!]
  sushiStaked: BigDecimal
  sushiStaked_not: BigDecimal
  sushiStaked_gt: BigDecimal
  sushiStaked_lt: BigDecimal
  sushiStaked_gte: BigDecimal
  sushiStaked_lte: BigDecimal
  sushiStaked_in: [BigDecimal!]
  sushiStaked_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  totalFeeAmount: BigDecimal
  totalFeeAmount_not: BigDecimal
  totalFeeAmount_gt: BigDecimal
  totalFeeAmount_lt: BigDecimal
  totalFeeAmount_gte: BigDecimal
  totalFeeAmount_lte: BigDecimal
  totalFeeAmount_in: [BigDecimal!]
  totalFeeAmount_not_in: [BigDecimal!]
  xSushiBurned: BigDecimal
  xSushiBurned_not: BigDecimal
  xSushiBurned_gt: BigDecimal
  xSushiBurned_lt: BigDecimal
  xSushiBurned_gte: BigDecimal
  xSushiBurned_lte: BigDecimal
  xSushiBurned_in: [BigDecimal!]
  xSushiBurned_not_in: [BigDecimal!]
  xSushiMinted: BigDecimal
  xSushiMinted_not: BigDecimal
  xSushiMinted_gt: BigDecimal
  xSushiMinted_lt: BigDecimal
  xSushiMinted_gte: BigDecimal
  xSushiMinted_lte: BigDecimal
  xSushiMinted_in: [BigDecimal!]
  xSushiMinted_not_in: [BigDecimal!]
  xSushiSushiRatio: BigDecimal
  xSushiSushiRatio_not: BigDecimal
  xSushiSushiRatio_gt: BigDecimal
  xSushiSushiRatio_lt: BigDecimal
  xSushiSushiRatio_gte: BigDecimal
  xSushiSushiRatio_lte: BigDecimal
  xSushiSushiRatio_in: [BigDecimal!]
  xSushiSushiRatio_not_in: [BigDecimal!]
  sushiXsushiRatio: BigDecimal
  sushiXsushiRatio_not: BigDecimal
  sushiXsushiRatio_gt: BigDecimal
  sushiXsushiRatio_lt: BigDecimal
  sushiXsushiRatio_gte: BigDecimal
  sushiXsushiRatio_lte: BigDecimal
  sushiXsushiRatio_in: [BigDecimal!]
  sushiXsushiRatio_not_in: [BigDecimal!]
  apr1m: BigDecimal
  apr1m_not: BigDecimal
  apr1m_gt: BigDecimal
  apr1m_lt: BigDecimal
  apr1m_gte: BigDecimal
  apr1m_lte: BigDecimal
  apr1m_in: [BigDecimal!]
  apr1m_not_in: [BigDecimal!]
  apr3m: BigDecimal
  apr3m_not: BigDecimal
  apr3m_gt: BigDecimal
  apr3m_lt: BigDecimal
  apr3m_gte: BigDecimal
  apr3m_lte: BigDecimal
  apr3m_in: [BigDecimal!]
  apr3m_not_in: [BigDecimal!]
  apr6m: BigDecimal
  apr6m_not: BigDecimal
  apr6m_gt: BigDecimal
  apr6m_lt: BigDecimal
  apr6m_gte: BigDecimal
  apr6m_lte: BigDecimal
  apr6m_in: [BigDecimal!]
  apr6m_not_in: [BigDecimal!]
  apr12m: BigDecimal
  apr12m_not: BigDecimal
  apr12m_gt: BigDecimal
  apr12m_lt: BigDecimal
  apr12m_gte: BigDecimal
  apr12m_lte: BigDecimal
  apr12m_in: [BigDecimal!]
  apr12m_not_in: [BigDecimal!]
  newTransactions: BigInt
  newTransactions_not: BigInt
  newTransactions_gt: BigInt
  newTransactions_lt: BigInt
  newTransactions_gte: BigInt
  newTransactions_lte: BigInt
  newTransactions_in: [BigInt!]
  newTransactions_not_in: [BigInt!]
  newSushiStaked: BigDecimal
  newSushiStaked_not: BigDecimal
  newSushiStaked_gt: BigDecimal
  newSushiStaked_lt: BigDecimal
  newSushiStaked_gte: BigDecimal
  newSushiStaked_lte: BigDecimal
  newSushiStaked_in: [BigDecimal!]
  newSushiStaked_not_in: [BigDecimal!]
  newSushiHarvested: BigDecimal
  newSushiHarvested_not: BigDecimal
  newSushiHarvested_gt: BigDecimal
  newSushiHarvested_lt: BigDecimal
  newSushiHarvested_gte: BigDecimal
  newSushiHarvested_lte: BigDecimal
  newSushiHarvested_in: [BigDecimal!]
  newSushiHarvested_not_in: [BigDecimal!]
  newFeeAmount: BigDecimal
  newFeeAmount_not: BigDecimal
  newFeeAmount_gt: BigDecimal
  newFeeAmount_lt: BigDecimal
  newFeeAmount_gte: BigDecimal
  newFeeAmount_lte: BigDecimal
  newFeeAmount_in: [BigDecimal!]
  newFeeAmount_not_in: [BigDecimal!]
  newXSushiBurned: BigDecimal
  newXSushiBurned_not: BigDecimal
  newXSushiBurned_gt: BigDecimal
  newXSushiBurned_lt: BigDecimal
  newXSushiBurned_gte: BigDecimal
  newXSushiBurned_lte: BigDecimal
  newXSushiBurned_in: [BigDecimal!]
  newXSushiBurned_not_in: [BigDecimal!]
  newXSushiMinted: BigDecimal
  newXSushiMinted_not: BigDecimal
  newXSushiMinted_gt: BigDecimal
  newXSushiMinted_lt: BigDecimal
  newXSushiMinted_gte: BigDecimal
  newXSushiMinted_lte: BigDecimal
  newXSushiMinted_in: [BigDecimal!]
  newXSushiMinted_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [HourSnapshot_filter]
  or: [HourSnapshot_filter]
}

enum HourSnapshot_orderBy {
  id
  date
  userCount
  transactionCount
  sushiSupply
  xSushiSupply
  sushiStaked
  sushiHarvested
  totalFeeAmount
  xSushiBurned
  xSushiMinted
  xSushiSushiRatio
  sushiXsushiRatio
  apr1m
  apr3m
  apr6m
  apr12m
  newTransactions
  newSushiStaked
  newSushiHarvested
  newFeeAmount
  newXSushiBurned
  newXSushiMinted
}

"8 bytes signed integer\n"
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  xsushi(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XSushi
  xsushis(
    skip: Int = 0
    first: Int = 100
    orderBy: XSushi_orderBy
    orderDirection: OrderDirection
    where: XSushi_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XSushi!]!
  transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  feeSender(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeSender
  feeSenders(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeSender_orderBy
    orderDirection: OrderDirection
    where: FeeSender_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeSender!]!
  fee(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fee
  fees(
    skip: Int = 0
    first: Int = 100
    orderBy: Fee_orderBy
    orderDirection: OrderDirection
    where: Fee_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Fee!]!
  hourSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourSnapshot
  hourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: HourSnapshot_orderBy
    orderDirection: OrderDirection
    where: HourSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourSnapshot!]!
  daySnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DaySnapshot
  daySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: DaySnapshot_orderBy
    orderDirection: OrderDirection
    where: DaySnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DaySnapshot!]!
  weekSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WeekSnapshot
  weekSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: WeekSnapshot_orderBy
    orderDirection: OrderDirection
    where: WeekSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WeekSnapshot!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  xsushi(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XSushi
  xsushis(
    skip: Int = 0
    first: Int = 100
    orderBy: XSushi_orderBy
    orderDirection: OrderDirection
    where: XSushi_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XSushi!]!
  transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  feeSender(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeSender
  feeSenders(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeSender_orderBy
    orderDirection: OrderDirection
    where: FeeSender_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeSender!]!
  fee(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fee
  fees(
    skip: Int = 0
    first: Int = 100
    orderBy: Fee_orderBy
    orderDirection: OrderDirection
    where: Fee_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Fee!]!
  hourSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourSnapshot
  hourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: HourSnapshot_orderBy
    orderDirection: OrderDirection
    where: HourSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourSnapshot!]!
  daySnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DaySnapshot
  daySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: DaySnapshot_orderBy
    orderDirection: OrderDirection
    where: DaySnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DaySnapshot!]!
  weekSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WeekSnapshot
  weekSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: WeekSnapshot_orderBy
    orderDirection: OrderDirection
    where: WeekSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WeekSnapshot!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"A string representation of microseconds UNIX timestamp (16 digits)\n"
scalar Timestamp

type Transaction {
  id: ID!
  from: User!
  to: User!
  amount: BigDecimal!
  type: TransactionType!
  gasUsed: BigInt!
  gasLimit: BigInt!
  gasPrice: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
}

enum TransactionType {
  TRANSFER
  MINT
  BURN
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: User_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: User_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  type: TransactionType
  type_not: TransactionType
  type_in: [TransactionType!]
  type_not_in: [TransactionType!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  from
  from__id
  from__balance
  from__createdAtBlock
  from__createdAtTimestamp
  from__modifiedAtBlock
  from__modifiedAtTimestamp
  to
  to__id
  to__balance
  to__createdAtBlock
  to__createdAtTimestamp
  to__modifiedAtBlock
  to__modifiedAtTimestamp
  amount
  type
  gasUsed
  gasLimit
  gasPrice
  createdAtBlock
  createdAtTimestamp
}

type User {
  id: ID!
  balance: BigInt!
  withdrawals(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
  deposits(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  withdrawals_: Transaction_filter
  deposits_: Transaction_filter
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  modifiedAtBlock: BigInt
  modifiedAtBlock_not: BigInt
  modifiedAtBlock_gt: BigInt
  modifiedAtBlock_lt: BigInt
  modifiedAtBlock_gte: BigInt
  modifiedAtBlock_lte: BigInt
  modifiedAtBlock_in: [BigInt!]
  modifiedAtBlock_not_in: [BigInt!]
  modifiedAtTimestamp: BigInt
  modifiedAtTimestamp_not: BigInt
  modifiedAtTimestamp_gt: BigInt
  modifiedAtTimestamp_lt: BigInt
  modifiedAtTimestamp_gte: BigInt
  modifiedAtTimestamp_lte: BigInt
  modifiedAtTimestamp_in: [BigInt!]
  modifiedAtTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  balance
  withdrawals
  deposits
  createdAtBlock
  createdAtTimestamp
  modifiedAtBlock
  modifiedAtTimestamp
}

type WeekSnapshot {
  """ {week}-{date} """
  id: ID!
  date: Int!
  userCount: BigInt!
  transactionCount: BigInt!
  sushiSupply: BigDecimal!
  xSushiSupply: BigDecimal!
  sushiStaked: BigDecimal!
  sushiHarvested: BigDecimal!
  totalFeeAmount: BigDecimal!
  xSushiBurned: BigDecimal!
  xSushiMinted: BigDecimal!
  xSushiSushiRatio: BigDecimal!
  sushiXsushiRatio: BigDecimal!
  apr1m: BigDecimal!
  apr3m: BigDecimal!
  apr6m: BigDecimal!
  apr12m: BigDecimal!
  newTransactions: BigInt!
  newSushiStaked: BigDecimal!
  newSushiHarvested: BigDecimal!
  newFeeAmount: BigDecimal!
  newXSushiBurned: BigDecimal!
  newXSushiMinted: BigDecimal!
}

input WeekSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  sushiSupply: BigDecimal
  sushiSupply_not: BigDecimal
  sushiSupply_gt: BigDecimal
  sushiSupply_lt: BigDecimal
  sushiSupply_gte: BigDecimal
  sushiSupply_lte: BigDecimal
  sushiSupply_in: [BigDecimal!]
  sushiSupply_not_in: [BigDecimal!]
  xSushiSupply: BigDecimal
  xSushiSupply_not: BigDecimal
  xSushiSupply_gt: BigDecimal
  xSushiSupply_lt: BigDecimal
  xSushiSupply_gte: BigDecimal
  xSushiSupply_lte: BigDecimal
  xSushiSupply_in: [BigDecimal!]
  xSushiSupply_not_in: [BigDecimal!]
  sushiStaked: BigDecimal
  sushiStaked_not: BigDecimal
  sushiStaked_gt: BigDecimal
  sushiStaked_lt: BigDecimal
  sushiStaked_gte: BigDecimal
  sushiStaked_lte: BigDecimal
  sushiStaked_in: [BigDecimal!]
  sushiStaked_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  totalFeeAmount: BigDecimal
  totalFeeAmount_not: BigDecimal
  totalFeeAmount_gt: BigDecimal
  totalFeeAmount_lt: BigDecimal
  totalFeeAmount_gte: BigDecimal
  totalFeeAmount_lte: BigDecimal
  totalFeeAmount_in: [BigDecimal!]
  totalFeeAmount_not_in: [BigDecimal!]
  xSushiBurned: BigDecimal
  xSushiBurned_not: BigDecimal
  xSushiBurned_gt: BigDecimal
  xSushiBurned_lt: BigDecimal
  xSushiBurned_gte: BigDecimal
  xSushiBurned_lte: BigDecimal
  xSushiBurned_in: [BigDecimal!]
  xSushiBurned_not_in: [BigDecimal!]
  xSushiMinted: BigDecimal
  xSushiMinted_not: BigDecimal
  xSushiMinted_gt: BigDecimal
  xSushiMinted_lt: BigDecimal
  xSushiMinted_gte: BigDecimal
  xSushiMinted_lte: BigDecimal
  xSushiMinted_in: [BigDecimal!]
  xSushiMinted_not_in: [BigDecimal!]
  xSushiSushiRatio: BigDecimal
  xSushiSushiRatio_not: BigDecimal
  xSushiSushiRatio_gt: BigDecimal
  xSushiSushiRatio_lt: BigDecimal
  xSushiSushiRatio_gte: BigDecimal
  xSushiSushiRatio_lte: BigDecimal
  xSushiSushiRatio_in: [BigDecimal!]
  xSushiSushiRatio_not_in: [BigDecimal!]
  sushiXsushiRatio: BigDecimal
  sushiXsushiRatio_not: BigDecimal
  sushiXsushiRatio_gt: BigDecimal
  sushiXsushiRatio_lt: BigDecimal
  sushiXsushiRatio_gte: BigDecimal
  sushiXsushiRatio_lte: BigDecimal
  sushiXsushiRatio_in: [BigDecimal!]
  sushiXsushiRatio_not_in: [BigDecimal!]
  apr1m: BigDecimal
  apr1m_not: BigDecimal
  apr1m_gt: BigDecimal
  apr1m_lt: BigDecimal
  apr1m_gte: BigDecimal
  apr1m_lte: BigDecimal
  apr1m_in: [BigDecimal!]
  apr1m_not_in: [BigDecimal!]
  apr3m: BigDecimal
  apr3m_not: BigDecimal
  apr3m_gt: BigDecimal
  apr3m_lt: BigDecimal
  apr3m_gte: BigDecimal
  apr3m_lte: BigDecimal
  apr3m_in: [BigDecimal!]
  apr3m_not_in: [BigDecimal!]
  apr6m: BigDecimal
  apr6m_not: BigDecimal
  apr6m_gt: BigDecimal
  apr6m_lt: BigDecimal
  apr6m_gte: BigDecimal
  apr6m_lte: BigDecimal
  apr6m_in: [BigDecimal!]
  apr6m_not_in: [BigDecimal!]
  apr12m: BigDecimal
  apr12m_not: BigDecimal
  apr12m_gt: BigDecimal
  apr12m_lt: BigDecimal
  apr12m_gte: BigDecimal
  apr12m_lte: BigDecimal
  apr12m_in: [BigDecimal!]
  apr12m_not_in: [BigDecimal!]
  newTransactions: BigInt
  newTransactions_not: BigInt
  newTransactions_gt: BigInt
  newTransactions_lt: BigInt
  newTransactions_gte: BigInt
  newTransactions_lte: BigInt
  newTransactions_in: [BigInt!]
  newTransactions_not_in: [BigInt!]
  newSushiStaked: BigDecimal
  newSushiStaked_not: BigDecimal
  newSushiStaked_gt: BigDecimal
  newSushiStaked_lt: BigDecimal
  newSushiStaked_gte: BigDecimal
  newSushiStaked_lte: BigDecimal
  newSushiStaked_in: [BigDecimal!]
  newSushiStaked_not_in: [BigDecimal!]
  newSushiHarvested: BigDecimal
  newSushiHarvested_not: BigDecimal
  newSushiHarvested_gt: BigDecimal
  newSushiHarvested_lt: BigDecimal
  newSushiHarvested_gte: BigDecimal
  newSushiHarvested_lte: BigDecimal
  newSushiHarvested_in: [BigDecimal!]
  newSushiHarvested_not_in: [BigDecimal!]
  newFeeAmount: BigDecimal
  newFeeAmount_not: BigDecimal
  newFeeAmount_gt: BigDecimal
  newFeeAmount_lt: BigDecimal
  newFeeAmount_gte: BigDecimal
  newFeeAmount_lte: BigDecimal
  newFeeAmount_in: [BigDecimal!]
  newFeeAmount_not_in: [BigDecimal!]
  newXSushiBurned: BigDecimal
  newXSushiBurned_not: BigDecimal
  newXSushiBurned_gt: BigDecimal
  newXSushiBurned_lt: BigDecimal
  newXSushiBurned_gte: BigDecimal
  newXSushiBurned_lte: BigDecimal
  newXSushiBurned_in: [BigDecimal!]
  newXSushiBurned_not_in: [BigDecimal!]
  newXSushiMinted: BigDecimal
  newXSushiMinted_not: BigDecimal
  newXSushiMinted_gt: BigDecimal
  newXSushiMinted_lt: BigDecimal
  newXSushiMinted_gte: BigDecimal
  newXSushiMinted_lte: BigDecimal
  newXSushiMinted_in: [BigDecimal!]
  newXSushiMinted_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WeekSnapshot_filter]
  or: [WeekSnapshot_filter]
}

enum WeekSnapshot_orderBy {
  id
  date
  userCount
  transactionCount
  sushiSupply
  xSushiSupply
  sushiStaked
  sushiHarvested
  totalFeeAmount
  xSushiBurned
  xSushiMinted
  xSushiSushiRatio
  sushiXsushiRatio
  apr1m
  apr3m
  apr6m
  apr12m
  newTransactions
  newSushiStaked
  newSushiHarvested
  newFeeAmount
  newXSushiBurned
  newXSushiMinted
}

type XSushi {
  id: ID!
  userCount: BigInt!
  transactionCount: BigInt!
  sushiSupply: BigDecimal!
  xSushiSupply: BigDecimal!
  sushiStaked: BigDecimal!
  sushiHarvested: BigDecimal!
  totalFeeAmount: BigDecimal!
  xSushiBurned: BigDecimal!
  xSushiMinted: BigDecimal!
  xSushiSushiRatio: BigDecimal!
  sushiXsushiRatio: BigDecimal!
  apr1m: BigDecimal!
  apr3m: BigDecimal!
  apr6m: BigDecimal!
  apr12m: BigDecimal!
  aprUpdatedAtTimestamp: BigInt!
}

input XSushi_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  sushiSupply: BigDecimal
  sushiSupply_not: BigDecimal
  sushiSupply_gt: BigDecimal
  sushiSupply_lt: BigDecimal
  sushiSupply_gte: BigDecimal
  sushiSupply_lte: BigDecimal
  sushiSupply_in: [BigDecimal!]
  sushiSupply_not_in: [BigDecimal!]
  xSushiSupply: BigDecimal
  xSushiSupply_not: BigDecimal
  xSushiSupply_gt: BigDecimal
  xSushiSupply_lt: BigDecimal
  xSushiSupply_gte: BigDecimal
  xSushiSupply_lte: BigDecimal
  xSushiSupply_in: [BigDecimal!]
  xSushiSupply_not_in: [BigDecimal!]
  sushiStaked: BigDecimal
  sushiStaked_not: BigDecimal
  sushiStaked_gt: BigDecimal
  sushiStaked_lt: BigDecimal
  sushiStaked_gte: BigDecimal
  sushiStaked_lte: BigDecimal
  sushiStaked_in: [BigDecimal!]
  sushiStaked_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  totalFeeAmount: BigDecimal
  totalFeeAmount_not: BigDecimal
  totalFeeAmount_gt: BigDecimal
  totalFeeAmount_lt: BigDecimal
  totalFeeAmount_gte: BigDecimal
  totalFeeAmount_lte: BigDecimal
  totalFeeAmount_in: [BigDecimal!]
  totalFeeAmount_not_in: [BigDecimal!]
  xSushiBurned: BigDecimal
  xSushiBurned_not: BigDecimal
  xSushiBurned_gt: BigDecimal
  xSushiBurned_lt: BigDecimal
  xSushiBurned_gte: BigDecimal
  xSushiBurned_lte: BigDecimal
  xSushiBurned_in: [BigDecimal!]
  xSushiBurned_not_in: [BigDecimal!]
  xSushiMinted: BigDecimal
  xSushiMinted_not: BigDecimal
  xSushiMinted_gt: BigDecimal
  xSushiMinted_lt: BigDecimal
  xSushiMinted_gte: BigDecimal
  xSushiMinted_lte: BigDecimal
  xSushiMinted_in: [BigDecimal!]
  xSushiMinted_not_in: [BigDecimal!]
  xSushiSushiRatio: BigDecimal
  xSushiSushiRatio_not: BigDecimal
  xSushiSushiRatio_gt: BigDecimal
  xSushiSushiRatio_lt: BigDecimal
  xSushiSushiRatio_gte: BigDecimal
  xSushiSushiRatio_lte: BigDecimal
  xSushiSushiRatio_in: [BigDecimal!]
  xSushiSushiRatio_not_in: [BigDecimal!]
  sushiXsushiRatio: BigDecimal
  sushiXsushiRatio_not: BigDecimal
  sushiXsushiRatio_gt: BigDecimal
  sushiXsushiRatio_lt: BigDecimal
  sushiXsushiRatio_gte: BigDecimal
  sushiXsushiRatio_lte: BigDecimal
  sushiXsushiRatio_in: [BigDecimal!]
  sushiXsushiRatio_not_in: [BigDecimal!]
  apr1m: BigDecimal
  apr1m_not: BigDecimal
  apr1m_gt: BigDecimal
  apr1m_lt: BigDecimal
  apr1m_gte: BigDecimal
  apr1m_lte: BigDecimal
  apr1m_in: [BigDecimal!]
  apr1m_not_in: [BigDecimal!]
  apr3m: BigDecimal
  apr3m_not: BigDecimal
  apr3m_gt: BigDecimal
  apr3m_lt: BigDecimal
  apr3m_gte: BigDecimal
  apr3m_lte: BigDecimal
  apr3m_in: [BigDecimal!]
  apr3m_not_in: [BigDecimal!]
  apr6m: BigDecimal
  apr6m_not: BigDecimal
  apr6m_gt: BigDecimal
  apr6m_lt: BigDecimal
  apr6m_gte: BigDecimal
  apr6m_lte: BigDecimal
  apr6m_in: [BigDecimal!]
  apr6m_not_in: [BigDecimal!]
  apr12m: BigDecimal
  apr12m_not: BigDecimal
  apr12m_gt: BigDecimal
  apr12m_lt: BigDecimal
  apr12m_gte: BigDecimal
  apr12m_lte: BigDecimal
  apr12m_in: [BigDecimal!]
  apr12m_not_in: [BigDecimal!]
  aprUpdatedAtTimestamp: BigInt
  aprUpdatedAtTimestamp_not: BigInt
  aprUpdatedAtTimestamp_gt: BigInt
  aprUpdatedAtTimestamp_lt: BigInt
  aprUpdatedAtTimestamp_gte: BigInt
  aprUpdatedAtTimestamp_lte: BigInt
  aprUpdatedAtTimestamp_in: [BigInt!]
  aprUpdatedAtTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [XSushi_filter]
  or: [XSushi_filter]
}

enum XSushi_orderBy {
  id
  userCount
  transactionCount
  sushiSupply
  xSushiSupply
  sushiStaked
  sushiHarvested
  totalFeeAmount
  xSushiBurned
  xSushiMinted
  xSushiSushiRatio
  sushiXsushiRatio
  apr1m
  apr3m
  apr6m
  apr12m
  aprUpdatedAtTimestamp
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}