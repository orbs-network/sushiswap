"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type ActionFailure {
  id: ID!
  timeStamp: BigInt!
  method: BigInt!
  action: OrchestratorAction!
}

input ActionFailure_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  method: BigInt
  method_not: BigInt
  method_gt: BigInt
  method_lt: BigInt
  method_gte: BigInt
  method_lte: BigInt
  method_in: [BigInt!]
  method_not_in: [BigInt!]
  action: String
  action_not: String
  action_gt: String
  action_lt: String
  action_gte: String
  action_lte: String
  action_in: [String!]
  action_not_in: [String!]
  action_contains: String
  action_contains_nocase: String
  action_not_contains: String
  action_not_contains_nocase: String
  action_starts_with: String
  action_starts_with_nocase: String
  action_not_starts_with: String
  action_not_starts_with_nocase: String
  action_ends_with: String
  action_ends_with_nocase: String
  action_not_ends_with: String
  action_not_ends_with_nocase: String
  action_: OrchestratorAction_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ActionFailure_filter]
  or: [ActionFailure_filter]
}

enum ActionFailure_orderBy {
  id
  timeStamp
  method
  action
  action__id
  action__timestamp
  action__lastUpdated
  action__state
  action__status
  action__vault
  action__transactionHash
  action__hash
  action__gasUsed
}

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Bundle {
  id: ID!
  createdAt: BigInt!
  bundle: String!
  creator: String!
  host: String!
  source: String!
  output: String!
  active: Boolean!
  infoHash: String!
  hash: String!
}

input Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  bundle: String
  bundle_not: String
  bundle_gt: String
  bundle_lt: String
  bundle_gte: String
  bundle_lte: String
  bundle_in: [String!]
  bundle_not_in: [String!]
  bundle_contains: String
  bundle_contains_nocase: String
  bundle_not_contains: String
  bundle_not_contains_nocase: String
  bundle_starts_with: String
  bundle_starts_with_nocase: String
  bundle_not_starts_with: String
  bundle_not_starts_with_nocase: String
  bundle_ends_with: String
  bundle_ends_with_nocase: String
  bundle_not_ends_with: String
  bundle_not_ends_with_nocase: String
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  host: String
  host_not: String
  host_gt: String
  host_lt: String
  host_gte: String
  host_lte: String
  host_in: [String!]
  host_not_in: [String!]
  host_contains: String
  host_contains_nocase: String
  host_not_contains: String
  host_not_contains_nocase: String
  host_starts_with: String
  host_starts_with_nocase: String
  host_not_starts_with: String
  host_not_starts_with_nocase: String
  host_ends_with: String
  host_ends_with_nocase: String
  host_not_ends_with: String
  host_not_ends_with_nocase: String
  source: String
  source_not: String
  source_gt: String
  source_lt: String
  source_gte: String
  source_lte: String
  source_in: [String!]
  source_not_in: [String!]
  source_contains: String
  source_contains_nocase: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  output: String
  output_not: String
  output_gt: String
  output_lt: String
  output_gte: String
  output_lte: String
  output_in: [String!]
  output_not_in: [String!]
  output_contains: String
  output_contains_nocase: String
  output_not_contains: String
  output_not_contains_nocase: String
  output_starts_with: String
  output_starts_with_nocase: String
  output_not_starts_with: String
  output_not_starts_with_nocase: String
  output_ends_with: String
  output_ends_with_nocase: String
  output_not_ends_with: String
  output_not_ends_with_nocase: String
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  infoHash: String
  infoHash_not: String
  infoHash_gt: String
  infoHash_lt: String
  infoHash_gte: String
  infoHash_lte: String
  infoHash_in: [String!]
  infoHash_not_in: [String!]
  infoHash_contains: String
  infoHash_contains_nocase: String
  infoHash_not_contains: String
  infoHash_not_contains_nocase: String
  infoHash_starts_with: String
  infoHash_starts_with_nocase: String
  infoHash_not_starts_with: String
  infoHash_not_starts_with_nocase: String
  infoHash_ends_with: String
  infoHash_ends_with_nocase: String
  infoHash_not_ends_with: String
  infoHash_not_ends_with_nocase: String
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bundle_filter]
  or: [Bundle_filter]
}

enum Bundle_orderBy {
  id
  createdAt
  bundle
  creator
  host
  source
  output
  active
  infoHash
  hash
}

scalar Bytes

type Creator {
  id: ID!
  strategies(skip: Int = 0, first: Int = 100, orderBy: Strategy_orderBy, orderDirection: OrderDirection, where: Strategy_filter): [Strategy!]!
  revenue: BigDecimal!
  withdrawals(skip: Int = 0, first: Int = 100, orderBy: CreatorWithdrawal_orderBy, orderDirection: OrderDirection, where: CreatorWithdrawal_filter): [CreatorWithdrawal!]
  totalValueLocked: BigDecimal!
  totalYield: BigDecimal!
}

type CreatorWithdrawal {
  id: ID!
  timeStamp: BigInt!
  creator: Creator!
  amount: BigDecimal!
}

input CreatorWithdrawal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: Creator_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CreatorWithdrawal_filter]
  or: [CreatorWithdrawal_filter]
}

enum CreatorWithdrawal_orderBy {
  id
  timeStamp
  creator
  creator__id
  creator__revenue
  creator__totalValueLocked
  creator__totalYield
  amount
}

input Creator_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  strategies_: Strategy_filter
  revenue: BigDecimal
  revenue_not: BigDecimal
  revenue_gt: BigDecimal
  revenue_lt: BigDecimal
  revenue_gte: BigDecimal
  revenue_lte: BigDecimal
  revenue_in: [BigDecimal!]
  revenue_not_in: [BigDecimal!]
  withdrawals_: CreatorWithdrawal_filter
  totalValueLocked: BigDecimal
  totalValueLocked_not: BigDecimal
  totalValueLocked_gt: BigDecimal
  totalValueLocked_lt: BigDecimal
  totalValueLocked_gte: BigDecimal
  totalValueLocked_lte: BigDecimal
  totalValueLocked_in: [BigDecimal!]
  totalValueLocked_not_in: [BigDecimal!]
  totalYield: BigDecimal
  totalYield_not: BigDecimal
  totalYield_gt: BigDecimal
  totalYield_lt: BigDecimal
  totalYield_gte: BigDecimal
  totalYield_lte: BigDecimal
  totalYield_in: [BigDecimal!]
  totalYield_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Creator_filter]
  or: [Creator_filter]
}

enum Creator_orderBy {
  id
  strategies
  revenue
  withdrawals
  totalValueLocked
  totalYield
}

type Depositor {
  id: ID!
  vault: Vault!
  account: String!
  executor: String!
  depositCaller: String!
  depositedAmount0: BigInt!
  depositedAmount1: BigInt!
  withdrawnAmount0: BigInt!
  withdrawnAmount1: BigInt!
  liquidityAmount0: BigInt!
  liquidityAmount1: BigInt!
  createdTimestamp: BigInt!
  updatedTimestamp: BigInt!
  shares: BigInt!
}

input Depositor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  executor: String
  executor_not: String
  executor_gt: String
  executor_lt: String
  executor_gte: String
  executor_lte: String
  executor_in: [String!]
  executor_not_in: [String!]
  executor_contains: String
  executor_contains_nocase: String
  executor_not_contains: String
  executor_not_contains_nocase: String
  executor_starts_with: String
  executor_starts_with_nocase: String
  executor_not_starts_with: String
  executor_not_starts_with_nocase: String
  executor_ends_with: String
  executor_ends_with_nocase: String
  executor_not_ends_with: String
  executor_not_ends_with_nocase: String
  depositCaller: String
  depositCaller_not: String
  depositCaller_gt: String
  depositCaller_lt: String
  depositCaller_gte: String
  depositCaller_lte: String
  depositCaller_in: [String!]
  depositCaller_not_in: [String!]
  depositCaller_contains: String
  depositCaller_contains_nocase: String
  depositCaller_not_contains: String
  depositCaller_not_contains_nocase: String
  depositCaller_starts_with: String
  depositCaller_starts_with_nocase: String
  depositCaller_not_starts_with: String
  depositCaller_not_starts_with_nocase: String
  depositCaller_ends_with: String
  depositCaller_ends_with_nocase: String
  depositCaller_not_ends_with: String
  depositCaller_not_ends_with_nocase: String
  depositedAmount0: BigInt
  depositedAmount0_not: BigInt
  depositedAmount0_gt: BigInt
  depositedAmount0_lt: BigInt
  depositedAmount0_gte: BigInt
  depositedAmount0_lte: BigInt
  depositedAmount0_in: [BigInt!]
  depositedAmount0_not_in: [BigInt!]
  depositedAmount1: BigInt
  depositedAmount1_not: BigInt
  depositedAmount1_gt: BigInt
  depositedAmount1_lt: BigInt
  depositedAmount1_gte: BigInt
  depositedAmount1_lte: BigInt
  depositedAmount1_in: [BigInt!]
  depositedAmount1_not_in: [BigInt!]
  withdrawnAmount0: BigInt
  withdrawnAmount0_not: BigInt
  withdrawnAmount0_gt: BigInt
  withdrawnAmount0_lt: BigInt
  withdrawnAmount0_gte: BigInt
  withdrawnAmount0_lte: BigInt
  withdrawnAmount0_in: [BigInt!]
  withdrawnAmount0_not_in: [BigInt!]
  withdrawnAmount1: BigInt
  withdrawnAmount1_not: BigInt
  withdrawnAmount1_gt: BigInt
  withdrawnAmount1_lt: BigInt
  withdrawnAmount1_gte: BigInt
  withdrawnAmount1_lte: BigInt
  withdrawnAmount1_in: [BigInt!]
  withdrawnAmount1_not_in: [BigInt!]
  liquidityAmount0: BigInt
  liquidityAmount0_not: BigInt
  liquidityAmount0_gt: BigInt
  liquidityAmount0_lt: BigInt
  liquidityAmount0_gte: BigInt
  liquidityAmount0_lte: BigInt
  liquidityAmount0_in: [BigInt!]
  liquidityAmount0_not_in: [BigInt!]
  liquidityAmount1: BigInt
  liquidityAmount1_not: BigInt
  liquidityAmount1_gt: BigInt
  liquidityAmount1_lt: BigInt
  liquidityAmount1_gte: BigInt
  liquidityAmount1_lte: BigInt
  liquidityAmount1_in: [BigInt!]
  liquidityAmount1_not_in: [BigInt!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  updatedTimestamp: BigInt
  updatedTimestamp_not: BigInt
  updatedTimestamp_gt: BigInt
  updatedTimestamp_lt: BigInt
  updatedTimestamp_gte: BigInt
  updatedTimestamp_lte: BigInt
  updatedTimestamp_in: [BigInt!]
  updatedTimestamp_not_in: [BigInt!]
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Depositor_filter]
  or: [Depositor_filter]
}

enum Depositor_orderBy {
  id
  vault
  vault__id
  vault__deployer
  vault__token0
  vault__token1
  vault__totalAmount0
  vault__totalAmount1
  vault__createdAt
  vault__lastSnapshot
  vault__pool
  vault__state
  vault__annualPercentageYield
  vault__annualPercentageDailyYield
  vault__annualPercentageMonthlyYield
  vault__annualPercentageYearlyYield
  vault__lastTotalT0ValuePerLPT
  vault__accruedStrategistFees0
  vault__accruedStrategistFees1
  vault__fees0
  vault__fees1
  vault__beaconName
  vault__gasUsed
  vault__gasDeposited
  vault__totalLPTokensIssued
  vault__token1Symbol
  vault__decimals
  vault__feeTier
  vault__name
  vault__symbol
  vault__token0Balance
  vault__token0Decimals
  vault__token0Name
  vault__token0Symbol
  vault__token1Balance
  vault__token1Decimals
  vault__token1Name
  vault__payloadIpfs
  vault__vaultManager
  vault__averageFeeArrPerSecond
  vault__totalSnapshots
  vault__annualFeeARR
  vault__dailyFeeAPR
  vault__weeklyFeeAPR
  vault__totalValueLockedToken0
  vault__totalValueLockedToken1
  account
  executor
  depositCaller
  depositedAmount0
  depositedAmount1
  withdrawnAmount0
  withdrawnAmount1
  liquidityAmount0
  liquidityAmount1
  createdTimestamp
  updatedTimestamp
  shares
}

"8 bytes signed integer\n"
scalar Int8

type Job {
  id: ID!
  name: String!
  timestamp: BigInt!
  jobInfo: [String!]!
  targetAddresses: [String!]!
  ipfsHash: String!
  executions(skip: Int = 0, first: Int = 100, orderBy: JobExecution_orderBy, orderDirection: OrderDirection, where: JobExecution_filter): [JobExecution!]!
  status: BigInt!
  failedCounts: BigInt!
  vaultAddress: Vault!
  jobHash: String!
  gasUsed: BigInt!
}

type JobExecution {
  id: ID!
  timestamp: BigInt!
  jobHash: String!
  executor: String!
  status: String!
  jobIdString: String!
  jobId: Job!
}

input JobExecution_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  jobHash: String
  jobHash_not: String
  jobHash_gt: String
  jobHash_lt: String
  jobHash_gte: String
  jobHash_lte: String
  jobHash_in: [String!]
  jobHash_not_in: [String!]
  jobHash_contains: String
  jobHash_contains_nocase: String
  jobHash_not_contains: String
  jobHash_not_contains_nocase: String
  jobHash_starts_with: String
  jobHash_starts_with_nocase: String
  jobHash_not_starts_with: String
  jobHash_not_starts_with_nocase: String
  jobHash_ends_with: String
  jobHash_ends_with_nocase: String
  jobHash_not_ends_with: String
  jobHash_not_ends_with_nocase: String
  executor: String
  executor_not: String
  executor_gt: String
  executor_lt: String
  executor_gte: String
  executor_lte: String
  executor_in: [String!]
  executor_not_in: [String!]
  executor_contains: String
  executor_contains_nocase: String
  executor_not_contains: String
  executor_not_contains_nocase: String
  executor_starts_with: String
  executor_starts_with_nocase: String
  executor_not_starts_with: String
  executor_not_starts_with_nocase: String
  executor_ends_with: String
  executor_ends_with_nocase: String
  executor_not_ends_with: String
  executor_not_ends_with_nocase: String
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  jobIdString: String
  jobIdString_not: String
  jobIdString_gt: String
  jobIdString_lt: String
  jobIdString_gte: String
  jobIdString_lte: String
  jobIdString_in: [String!]
  jobIdString_not_in: [String!]
  jobIdString_contains: String
  jobIdString_contains_nocase: String
  jobIdString_not_contains: String
  jobIdString_not_contains_nocase: String
  jobIdString_starts_with: String
  jobIdString_starts_with_nocase: String
  jobIdString_not_starts_with: String
  jobIdString_not_starts_with_nocase: String
  jobIdString_ends_with: String
  jobIdString_ends_with_nocase: String
  jobIdString_not_ends_with: String
  jobIdString_not_ends_with_nocase: String
  jobId: String
  jobId_not: String
  jobId_gt: String
  jobId_lt: String
  jobId_gte: String
  jobId_lte: String
  jobId_in: [String!]
  jobId_not_in: [String!]
  jobId_contains: String
  jobId_contains_nocase: String
  jobId_not_contains: String
  jobId_not_contains_nocase: String
  jobId_starts_with: String
  jobId_starts_with_nocase: String
  jobId_not_starts_with: String
  jobId_not_starts_with_nocase: String
  jobId_ends_with: String
  jobId_ends_with_nocase: String
  jobId_not_ends_with: String
  jobId_not_ends_with_nocase: String
  jobId_: Job_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [JobExecution_filter]
  or: [JobExecution_filter]
}

enum JobExecution_orderBy {
  id
  timestamp
  jobHash
  executor
  status
  jobIdString
  jobId
  jobId__id
  jobId__name
  jobId__timestamp
  jobId__ipfsHash
  jobId__status
  jobId__failedCounts
  jobId__jobHash
  jobId__gasUsed
}

type JobGasDeposited {
  id: ID!
  timestamp: BigInt!
  creator: String!
  amount: BigInt!
}

input JobGasDeposited_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [JobGasDeposited_filter]
  or: [JobGasDeposited_filter]
}

enum JobGasDeposited_orderBy {
  id
  timestamp
  creator
  amount
}

type JobGasWithdrawn {
  id: ID!
  timestamp: BigInt!
  creator: String!
  amount: BigInt!
}

input JobGasWithdrawn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [JobGasWithdrawn_filter]
  or: [JobGasWithdrawn_filter]
}

enum JobGasWithdrawn_orderBy {
  id
  timestamp
  creator
  amount
}

input Job_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  jobInfo: [String!]
  jobInfo_not: [String!]
  jobInfo_contains: [String!]
  jobInfo_contains_nocase: [String!]
  jobInfo_not_contains: [String!]
  jobInfo_not_contains_nocase: [String!]
  targetAddresses: [String!]
  targetAddresses_not: [String!]
  targetAddresses_contains: [String!]
  targetAddresses_contains_nocase: [String!]
  targetAddresses_not_contains: [String!]
  targetAddresses_not_contains_nocase: [String!]
  ipfsHash: String
  ipfsHash_not: String
  ipfsHash_gt: String
  ipfsHash_lt: String
  ipfsHash_gte: String
  ipfsHash_lte: String
  ipfsHash_in: [String!]
  ipfsHash_not_in: [String!]
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  executions_: JobExecution_filter
  status: BigInt
  status_not: BigInt
  status_gt: BigInt
  status_lt: BigInt
  status_gte: BigInt
  status_lte: BigInt
  status_in: [BigInt!]
  status_not_in: [BigInt!]
  failedCounts: BigInt
  failedCounts_not: BigInt
  failedCounts_gt: BigInt
  failedCounts_lt: BigInt
  failedCounts_gte: BigInt
  failedCounts_lte: BigInt
  failedCounts_in: [BigInt!]
  failedCounts_not_in: [BigInt!]
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  vaultAddress_: Vault_filter
  jobHash: String
  jobHash_not: String
  jobHash_gt: String
  jobHash_lt: String
  jobHash_gte: String
  jobHash_lte: String
  jobHash_in: [String!]
  jobHash_not_in: [String!]
  jobHash_contains: String
  jobHash_contains_nocase: String
  jobHash_not_contains: String
  jobHash_not_contains_nocase: String
  jobHash_starts_with: String
  jobHash_starts_with_nocase: String
  jobHash_not_starts_with: String
  jobHash_not_starts_with_nocase: String
  jobHash_ends_with: String
  jobHash_ends_with_nocase: String
  jobHash_not_ends_with: String
  jobHash_not_ends_with_nocase: String
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Job_filter]
  or: [Job_filter]
}

enum Job_orderBy {
  id
  name
  timestamp
  jobInfo
  targetAddresses
  ipfsHash
  executions
  status
  failedCounts
  vaultAddress
  vaultAddress__id
  vaultAddress__deployer
  vaultAddress__token0
  vaultAddress__token1
  vaultAddress__totalAmount0
  vaultAddress__totalAmount1
  vaultAddress__createdAt
  vaultAddress__lastSnapshot
  vaultAddress__pool
  vaultAddress__state
  vaultAddress__annualPercentageYield
  vaultAddress__annualPercentageDailyYield
  vaultAddress__annualPercentageMonthlyYield
  vaultAddress__annualPercentageYearlyYield
  vaultAddress__lastTotalT0ValuePerLPT
  vaultAddress__accruedStrategistFees0
  vaultAddress__accruedStrategistFees1
  vaultAddress__fees0
  vaultAddress__fees1
  vaultAddress__beaconName
  vaultAddress__gasUsed
  vaultAddress__gasDeposited
  vaultAddress__totalLPTokensIssued
  vaultAddress__token1Symbol
  vaultAddress__decimals
  vaultAddress__feeTier
  vaultAddress__name
  vaultAddress__symbol
  vaultAddress__token0Balance
  vaultAddress__token0Decimals
  vaultAddress__token0Name
  vaultAddress__token0Symbol
  vaultAddress__token1Balance
  vaultAddress__token1Decimals
  vaultAddress__token1Name
  vaultAddress__payloadIpfs
  vaultAddress__vaultManager
  vaultAddress__averageFeeArrPerSecond
  vaultAddress__totalSnapshots
  vaultAddress__annualFeeARR
  vaultAddress__dailyFeeAPR
  vaultAddress__weeklyFeeAPR
  vaultAddress__totalValueLockedToken0
  vaultAddress__totalValueLockedToken1
  jobHash
  gasUsed
}

type Keeper {
  id: ID!
  bondHeld: BigDecimal!
  index: BigInt!
  actions(skip: Int = 0, first: Int = 100, orderBy: OrchestratorAction_orderBy, orderDirection: OrderDirection, where: OrchestratorAction_filter): [OrchestratorAction!]!
  status: String!
  queueTimeline(skip: Int = 0, first: Int = 100, orderBy: QueueTimeline_orderBy, orderDirection: OrderDirection, where: QueueTimeline_filter): [QueueTimeline!]!
  permissionUpdates(skip: Int = 0, first: Int = 100, orderBy: PermissionUpdate_orderBy, orderDirection: OrderDirection, where: PermissionUpdate_filter): [PermissionUpdate!]!
}

input Keeper_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bondHeld: BigDecimal
  bondHeld_not: BigDecimal
  bondHeld_gt: BigDecimal
  bondHeld_lt: BigDecimal
  bondHeld_gte: BigDecimal
  bondHeld_lte: BigDecimal
  bondHeld_in: [BigDecimal!]
  bondHeld_not_in: [BigDecimal!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  actions_: OrchestratorAction_filter
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  queueTimeline_: QueueTimeline_filter
  permissionUpdates_: PermissionUpdate_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Keeper_filter]
  or: [Keeper_filter]
}

enum Keeper_orderBy {
  id
  bondHeld
  index
  actions
  status
  queueTimeline
  permissionUpdates
}

type LeaderBoard {
  id: ID!
  address: String!
  numStaticJobs: BigInt!
  numApps: BigInt!
  timestamp: BigInt!
}

input LeaderBoard_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  numStaticJobs: BigInt
  numStaticJobs_not: BigInt
  numStaticJobs_gt: BigInt
  numStaticJobs_lt: BigInt
  numStaticJobs_gte: BigInt
  numStaticJobs_lte: BigInt
  numStaticJobs_in: [BigInt!]
  numStaticJobs_not_in: [BigInt!]
  numApps: BigInt
  numApps_not: BigInt
  numApps_gt: BigInt
  numApps_lt: BigInt
  numApps_gte: BigInt
  numApps_lte: BigInt
  numApps_in: [BigInt!]
  numApps_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LeaderBoard_filter]
  or: [LeaderBoard_filter]
}

enum LeaderBoard_orderBy {
  id
  address
  numStaticJobs
  numApps
  timestamp
}

type LiquiditySteer {
  id: ID!
  vault: Vault!
  timeStamp: BigInt!
  tick: BigInt!
}

input LiquiditySteer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquiditySteer_filter]
  or: [LiquiditySteer_filter]
}

enum LiquiditySteer_orderBy {
  id
  vault
  vault__id
  vault__deployer
  vault__token0
  vault__token1
  vault__totalAmount0
  vault__totalAmount1
  vault__createdAt
  vault__lastSnapshot
  vault__pool
  vault__state
  vault__annualPercentageYield
  vault__annualPercentageDailyYield
  vault__annualPercentageMonthlyYield
  vault__annualPercentageYearlyYield
  vault__lastTotalT0ValuePerLPT
  vault__accruedStrategistFees0
  vault__accruedStrategistFees1
  vault__fees0
  vault__fees1
  vault__beaconName
  vault__gasUsed
  vault__gasDeposited
  vault__totalLPTokensIssued
  vault__token1Symbol
  vault__decimals
  vault__feeTier
  vault__name
  vault__symbol
  vault__token0Balance
  vault__token0Decimals
  vault__token0Name
  vault__token0Symbol
  vault__token1Balance
  vault__token1Decimals
  vault__token1Name
  vault__payloadIpfs
  vault__vaultManager
  vault__averageFeeArrPerSecond
  vault__totalSnapshots
  vault__annualFeeARR
  vault__dailyFeeAPR
  vault__weeklyFeeAPR
  vault__totalValueLockedToken0
  vault__totalValueLockedToken1
  timeStamp
  tick
}

type OrchestratorAction {
  id: ID!
  timestamp: BigInt!
  from: Keeper!
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]!
  lastUpdated: BigInt
  state: String!
  status: String!
  recipients: [String!]
  actionFailed(skip: Int = 0, first: Int = 100, orderBy: ActionFailure_orderBy, orderDirection: OrderDirection, where: ActionFailure_filter): [ActionFailure!]!
  vault: String!
  transactionHash: String!
  hash: String!
  gasUsed: BigInt!
}

input OrchestratorAction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Keeper_filter
  votes_: Vote_filter
  lastUpdated: BigInt
  lastUpdated_not: BigInt
  lastUpdated_gt: BigInt
  lastUpdated_lt: BigInt
  lastUpdated_gte: BigInt
  lastUpdated_lte: BigInt
  lastUpdated_in: [BigInt!]
  lastUpdated_not_in: [BigInt!]
  state: String
  state_not: String
  state_gt: String
  state_lt: String
  state_gte: String
  state_lte: String
  state_in: [String!]
  state_not_in: [String!]
  state_contains: String
  state_contains_nocase: String
  state_not_contains: String
  state_not_contains_nocase: String
  state_starts_with: String
  state_starts_with_nocase: String
  state_not_starts_with: String
  state_not_starts_with_nocase: String
  state_ends_with: String
  state_ends_with_nocase: String
  state_not_ends_with: String
  state_not_ends_with_nocase: String
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  recipients: [String!]
  recipients_not: [String!]
  recipients_contains: [String!]
  recipients_contains_nocase: [String!]
  recipients_not_contains: [String!]
  recipients_not_contains_nocase: [String!]
  actionFailed_: ActionFailure_filter
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrchestratorAction_filter]
  or: [OrchestratorAction_filter]
}

enum OrchestratorAction_orderBy {
  id
  timestamp
  from
  from__id
  from__bondHeld
  from__index
  from__status
  votes
  lastUpdated
  state
  status
  recipients
  actionFailed
  vault
  transactionHash
  hash
  gasUsed
}

type OrchestratorReward {
  id: ID!
  timeStamp: BigInt!
  updatedTimeStamp: BigInt!
  address: String!
  reward: BigInt!
  trackerId: OrchestratorRewardTracker!
}

type OrchestratorRewardSnapshot {
  id: ID!
  timeStamp: BigInt!
  updatedTimeStamp: BigInt!
  address: String!
  reward: BigInt!
}

input OrchestratorRewardSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  updatedTimeStamp: BigInt
  updatedTimeStamp_not: BigInt
  updatedTimeStamp_gt: BigInt
  updatedTimeStamp_lt: BigInt
  updatedTimeStamp_gte: BigInt
  updatedTimeStamp_lte: BigInt
  updatedTimeStamp_in: [BigInt!]
  updatedTimeStamp_not_in: [BigInt!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  reward: BigInt
  reward_not: BigInt
  reward_gt: BigInt
  reward_lt: BigInt
  reward_gte: BigInt
  reward_lte: BigInt
  reward_in: [BigInt!]
  reward_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrchestratorRewardSnapshot_filter]
  or: [OrchestratorRewardSnapshot_filter]
}

enum OrchestratorRewardSnapshot_orderBy {
  id
  timeStamp
  updatedTimeStamp
  address
  reward
}

type OrchestratorRewardTracker {
  id: ID!
  timeStamp: BigInt!
  rewards(skip: Int = 0, first: Int = 100, orderBy: OrchestratorReward_orderBy, orderDirection: OrderDirection, where: OrchestratorReward_filter): [OrchestratorReward!]!
}

input OrchestratorRewardTracker_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  rewards_: OrchestratorReward_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrchestratorRewardTracker_filter]
  or: [OrchestratorRewardTracker_filter]
}

enum OrchestratorRewardTracker_orderBy {
  id
  timeStamp
  rewards
}

input OrchestratorReward_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  updatedTimeStamp: BigInt
  updatedTimeStamp_not: BigInt
  updatedTimeStamp_gt: BigInt
  updatedTimeStamp_lt: BigInt
  updatedTimeStamp_gte: BigInt
  updatedTimeStamp_lte: BigInt
  updatedTimeStamp_in: [BigInt!]
  updatedTimeStamp_not_in: [BigInt!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  reward: BigInt
  reward_not: BigInt
  reward_gt: BigInt
  reward_lt: BigInt
  reward_gte: BigInt
  reward_lte: BigInt
  reward_in: [BigInt!]
  reward_not_in: [BigInt!]
  trackerId: String
  trackerId_not: String
  trackerId_gt: String
  trackerId_lt: String
  trackerId_gte: String
  trackerId_lte: String
  trackerId_in: [String!]
  trackerId_not_in: [String!]
  trackerId_contains: String
  trackerId_contains_nocase: String
  trackerId_not_contains: String
  trackerId_not_contains_nocase: String
  trackerId_starts_with: String
  trackerId_starts_with_nocase: String
  trackerId_not_starts_with: String
  trackerId_not_starts_with_nocase: String
  trackerId_ends_with: String
  trackerId_ends_with_nocase: String
  trackerId_not_ends_with: String
  trackerId_not_ends_with_nocase: String
  trackerId_: OrchestratorRewardTracker_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrchestratorReward_filter]
  or: [OrchestratorReward_filter]
}

enum OrchestratorReward_orderBy {
  id
  timeStamp
  updatedTimeStamp
  address
  reward
  trackerId
  trackerId__id
  trackerId__timeStamp
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PermissionUpdate {
  id: ID!
  keeper: Keeper!
  timeStamp: BigInt!
  action: String!
}

input PermissionUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  keeper: String
  keeper_not: String
  keeper_gt: String
  keeper_lt: String
  keeper_gte: String
  keeper_lte: String
  keeper_in: [String!]
  keeper_not_in: [String!]
  keeper_contains: String
  keeper_contains_nocase: String
  keeper_not_contains: String
  keeper_not_contains_nocase: String
  keeper_starts_with: String
  keeper_starts_with_nocase: String
  keeper_not_starts_with: String
  keeper_not_starts_with_nocase: String
  keeper_ends_with: String
  keeper_ends_with_nocase: String
  keeper_not_ends_with: String
  keeper_not_ends_with_nocase: String
  keeper_: Keeper_filter
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  action: String
  action_not: String
  action_gt: String
  action_lt: String
  action_gte: String
  action_lte: String
  action_in: [String!]
  action_not_in: [String!]
  action_contains: String
  action_contains_nocase: String
  action_not_contains: String
  action_not_contains_nocase: String
  action_starts_with: String
  action_starts_with_nocase: String
  action_not_starts_with: String
  action_not_starts_with_nocase: String
  action_ends_with: String
  action_ends_with_nocase: String
  action_not_ends_with: String
  action_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PermissionUpdate_filter]
  or: [PermissionUpdate_filter]
}

enum PermissionUpdate_orderBy {
  id
  keeper
  keeper__id
  keeper__bondHeld
  keeper__index
  keeper__status
  timeStamp
  action
}

type PrevAnnualVaultSnapshot {
  id: ID!
  timestamp: BigInt!
  vaultAddress: Vault!
  totalAmount0: BigInt!
  totalAmount1: BigInt!
  sqrtPriceX96: BigInt!
  totalSupply: BigInt!
  fees1: BigInt!
  fees0: BigInt!
}

input PrevAnnualVaultSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  vaultAddress_: Vault_filter
  totalAmount0: BigInt
  totalAmount0_not: BigInt
  totalAmount0_gt: BigInt
  totalAmount0_lt: BigInt
  totalAmount0_gte: BigInt
  totalAmount0_lte: BigInt
  totalAmount0_in: [BigInt!]
  totalAmount0_not_in: [BigInt!]
  totalAmount1: BigInt
  totalAmount1_not: BigInt
  totalAmount1_gt: BigInt
  totalAmount1_lt: BigInt
  totalAmount1_gte: BigInt
  totalAmount1_lte: BigInt
  totalAmount1_in: [BigInt!]
  totalAmount1_not_in: [BigInt!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  fees1: BigInt
  fees1_not: BigInt
  fees1_gt: BigInt
  fees1_lt: BigInt
  fees1_gte: BigInt
  fees1_lte: BigInt
  fees1_in: [BigInt!]
  fees1_not_in: [BigInt!]
  fees0: BigInt
  fees0_not: BigInt
  fees0_gt: BigInt
  fees0_lt: BigInt
  fees0_gte: BigInt
  fees0_lte: BigInt
  fees0_in: [BigInt!]
  fees0_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PrevAnnualVaultSnapshot_filter]
  or: [PrevAnnualVaultSnapshot_filter]
}

enum PrevAnnualVaultSnapshot_orderBy {
  id
  timestamp
  vaultAddress
  vaultAddress__id
  vaultAddress__deployer
  vaultAddress__token0
  vaultAddress__token1
  vaultAddress__totalAmount0
  vaultAddress__totalAmount1
  vaultAddress__createdAt
  vaultAddress__lastSnapshot
  vaultAddress__pool
  vaultAddress__state
  vaultAddress__annualPercentageYield
  vaultAddress__annualPercentageDailyYield
  vaultAddress__annualPercentageMonthlyYield
  vaultAddress__annualPercentageYearlyYield
  vaultAddress__lastTotalT0ValuePerLPT
  vaultAddress__accruedStrategistFees0
  vaultAddress__accruedStrategistFees1
  vaultAddress__fees0
  vaultAddress__fees1
  vaultAddress__beaconName
  vaultAddress__gasUsed
  vaultAddress__gasDeposited
  vaultAddress__totalLPTokensIssued
  vaultAddress__token1Symbol
  vaultAddress__decimals
  vaultAddress__feeTier
  vaultAddress__name
  vaultAddress__symbol
  vaultAddress__token0Balance
  vaultAddress__token0Decimals
  vaultAddress__token0Name
  vaultAddress__token0Symbol
  vaultAddress__token1Balance
  vaultAddress__token1Decimals
  vaultAddress__token1Name
  vaultAddress__payloadIpfs
  vaultAddress__vaultManager
  vaultAddress__averageFeeArrPerSecond
  vaultAddress__totalSnapshots
  vaultAddress__annualFeeARR
  vaultAddress__dailyFeeAPR
  vaultAddress__weeklyFeeAPR
  vaultAddress__totalValueLockedToken0
  vaultAddress__totalValueLockedToken1
  totalAmount0
  totalAmount1
  sqrtPriceX96
  totalSupply
  fees1
  fees0
}

type PrevDailyVaultSnapshot {
  id: ID!
  timestamp: BigInt!
  vaultAddress: Vault!
  totalAmount0: BigInt!
  totalAmount1: BigInt!
  sqrtPriceX96: BigInt!
  totalSupply: BigInt!
  fees1: BigInt!
  fees0: BigInt!
}

input PrevDailyVaultSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  vaultAddress_: Vault_filter
  totalAmount0: BigInt
  totalAmount0_not: BigInt
  totalAmount0_gt: BigInt
  totalAmount0_lt: BigInt
  totalAmount0_gte: BigInt
  totalAmount0_lte: BigInt
  totalAmount0_in: [BigInt!]
  totalAmount0_not_in: [BigInt!]
  totalAmount1: BigInt
  totalAmount1_not: BigInt
  totalAmount1_gt: BigInt
  totalAmount1_lt: BigInt
  totalAmount1_gte: BigInt
  totalAmount1_lte: BigInt
  totalAmount1_in: [BigInt!]
  totalAmount1_not_in: [BigInt!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  fees1: BigInt
  fees1_not: BigInt
  fees1_gt: BigInt
  fees1_lt: BigInt
  fees1_gte: BigInt
  fees1_lte: BigInt
  fees1_in: [BigInt!]
  fees1_not_in: [BigInt!]
  fees0: BigInt
  fees0_not: BigInt
  fees0_gt: BigInt
  fees0_lt: BigInt
  fees0_gte: BigInt
  fees0_lte: BigInt
  fees0_in: [BigInt!]
  fees0_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PrevDailyVaultSnapshot_filter]
  or: [PrevDailyVaultSnapshot_filter]
}

enum PrevDailyVaultSnapshot_orderBy {
  id
  timestamp
  vaultAddress
  vaultAddress__id
  vaultAddress__deployer
  vaultAddress__token0
  vaultAddress__token1
  vaultAddress__totalAmount0
  vaultAddress__totalAmount1
  vaultAddress__createdAt
  vaultAddress__lastSnapshot
  vaultAddress__pool
  vaultAddress__state
  vaultAddress__annualPercentageYield
  vaultAddress__annualPercentageDailyYield
  vaultAddress__annualPercentageMonthlyYield
  vaultAddress__annualPercentageYearlyYield
  vaultAddress__lastTotalT0ValuePerLPT
  vaultAddress__accruedStrategistFees0
  vaultAddress__accruedStrategistFees1
  vaultAddress__fees0
  vaultAddress__fees1
  vaultAddress__beaconName
  vaultAddress__gasUsed
  vaultAddress__gasDeposited
  vaultAddress__totalLPTokensIssued
  vaultAddress__token1Symbol
  vaultAddress__decimals
  vaultAddress__feeTier
  vaultAddress__name
  vaultAddress__symbol
  vaultAddress__token0Balance
  vaultAddress__token0Decimals
  vaultAddress__token0Name
  vaultAddress__token0Symbol
  vaultAddress__token1Balance
  vaultAddress__token1Decimals
  vaultAddress__token1Name
  vaultAddress__payloadIpfs
  vaultAddress__vaultManager
  vaultAddress__averageFeeArrPerSecond
  vaultAddress__totalSnapshots
  vaultAddress__annualFeeARR
  vaultAddress__dailyFeeAPR
  vaultAddress__weeklyFeeAPR
  vaultAddress__totalValueLockedToken0
  vaultAddress__totalValueLockedToken1
  totalAmount0
  totalAmount1
  sqrtPriceX96
  totalSupply
  fees1
  fees0
}

type PrevMonthlyVaultSnapshot {
  id: ID!
  timestamp: BigInt!
  vaultAddress: Vault!
  totalAmount0: BigInt!
  totalAmount1: BigInt!
  sqrtPriceX96: BigInt!
  totalSupply: BigInt!
  fees1: BigInt!
  fees0: BigInt!
}

input PrevMonthlyVaultSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  vaultAddress_: Vault_filter
  totalAmount0: BigInt
  totalAmount0_not: BigInt
  totalAmount0_gt: BigInt
  totalAmount0_lt: BigInt
  totalAmount0_gte: BigInt
  totalAmount0_lte: BigInt
  totalAmount0_in: [BigInt!]
  totalAmount0_not_in: [BigInt!]
  totalAmount1: BigInt
  totalAmount1_not: BigInt
  totalAmount1_gt: BigInt
  totalAmount1_lt: BigInt
  totalAmount1_gte: BigInt
  totalAmount1_lte: BigInt
  totalAmount1_in: [BigInt!]
  totalAmount1_not_in: [BigInt!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  fees1: BigInt
  fees1_not: BigInt
  fees1_gt: BigInt
  fees1_lt: BigInt
  fees1_gte: BigInt
  fees1_lte: BigInt
  fees1_in: [BigInt!]
  fees1_not_in: [BigInt!]
  fees0: BigInt
  fees0_not: BigInt
  fees0_gt: BigInt
  fees0_lt: BigInt
  fees0_gte: BigInt
  fees0_lte: BigInt
  fees0_in: [BigInt!]
  fees0_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PrevMonthlyVaultSnapshot_filter]
  or: [PrevMonthlyVaultSnapshot_filter]
}

enum PrevMonthlyVaultSnapshot_orderBy {
  id
  timestamp
  vaultAddress
  vaultAddress__id
  vaultAddress__deployer
  vaultAddress__token0
  vaultAddress__token1
  vaultAddress__totalAmount0
  vaultAddress__totalAmount1
  vaultAddress__createdAt
  vaultAddress__lastSnapshot
  vaultAddress__pool
  vaultAddress__state
  vaultAddress__annualPercentageYield
  vaultAddress__annualPercentageDailyYield
  vaultAddress__annualPercentageMonthlyYield
  vaultAddress__annualPercentageYearlyYield
  vaultAddress__lastTotalT0ValuePerLPT
  vaultAddress__accruedStrategistFees0
  vaultAddress__accruedStrategistFees1
  vaultAddress__fees0
  vaultAddress__fees1
  vaultAddress__beaconName
  vaultAddress__gasUsed
  vaultAddress__gasDeposited
  vaultAddress__totalLPTokensIssued
  vaultAddress__token1Symbol
  vaultAddress__decimals
  vaultAddress__feeTier
  vaultAddress__name
  vaultAddress__symbol
  vaultAddress__token0Balance
  vaultAddress__token0Decimals
  vaultAddress__token0Name
  vaultAddress__token0Symbol
  vaultAddress__token1Balance
  vaultAddress__token1Decimals
  vaultAddress__token1Name
  vaultAddress__payloadIpfs
  vaultAddress__vaultManager
  vaultAddress__averageFeeArrPerSecond
  vaultAddress__totalSnapshots
  vaultAddress__annualFeeARR
  vaultAddress__dailyFeeAPR
  vaultAddress__weeklyFeeAPR
  vaultAddress__totalValueLockedToken0
  vaultAddress__totalValueLockedToken1
  totalAmount0
  totalAmount1
  sqrtPriceX96
  totalSupply
  fees1
  fees0
}

type PrevVaultSnapshot {
  id: ID!
  timestamp: BigInt!
  vaultAddress: Vault!
  totalAmount0: BigInt!
  totalAmount1: BigInt!
  sqrtPriceX96: BigInt!
  totalSupply: BigInt!
  fees1: BigInt!
  fees0: BigInt!
}

input PrevVaultSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  vaultAddress_: Vault_filter
  totalAmount0: BigInt
  totalAmount0_not: BigInt
  totalAmount0_gt: BigInt
  totalAmount0_lt: BigInt
  totalAmount0_gte: BigInt
  totalAmount0_lte: BigInt
  totalAmount0_in: [BigInt!]
  totalAmount0_not_in: [BigInt!]
  totalAmount1: BigInt
  totalAmount1_not: BigInt
  totalAmount1_gt: BigInt
  totalAmount1_lt: BigInt
  totalAmount1_gte: BigInt
  totalAmount1_lte: BigInt
  totalAmount1_in: [BigInt!]
  totalAmount1_not_in: [BigInt!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  fees1: BigInt
  fees1_not: BigInt
  fees1_gt: BigInt
  fees1_lt: BigInt
  fees1_gte: BigInt
  fees1_lte: BigInt
  fees1_in: [BigInt!]
  fees1_not_in: [BigInt!]
  fees0: BigInt
  fees0_not: BigInt
  fees0_gt: BigInt
  fees0_lt: BigInt
  fees0_gte: BigInt
  fees0_lte: BigInt
  fees0_in: [BigInt!]
  fees0_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PrevVaultSnapshot_filter]
  or: [PrevVaultSnapshot_filter]
}

enum PrevVaultSnapshot_orderBy {
  id
  timestamp
  vaultAddress
  vaultAddress__id
  vaultAddress__deployer
  vaultAddress__token0
  vaultAddress__token1
  vaultAddress__totalAmount0
  vaultAddress__totalAmount1
  vaultAddress__createdAt
  vaultAddress__lastSnapshot
  vaultAddress__pool
  vaultAddress__state
  vaultAddress__annualPercentageYield
  vaultAddress__annualPercentageDailyYield
  vaultAddress__annualPercentageMonthlyYield
  vaultAddress__annualPercentageYearlyYield
  vaultAddress__lastTotalT0ValuePerLPT
  vaultAddress__accruedStrategistFees0
  vaultAddress__accruedStrategistFees1
  vaultAddress__fees0
  vaultAddress__fees1
  vaultAddress__beaconName
  vaultAddress__gasUsed
  vaultAddress__gasDeposited
  vaultAddress__totalLPTokensIssued
  vaultAddress__token1Symbol
  vaultAddress__decimals
  vaultAddress__feeTier
  vaultAddress__name
  vaultAddress__symbol
  vaultAddress__token0Balance
  vaultAddress__token0Decimals
  vaultAddress__token0Name
  vaultAddress__token0Symbol
  vaultAddress__token1Balance
  vaultAddress__token1Decimals
  vaultAddress__token1Name
  vaultAddress__payloadIpfs
  vaultAddress__vaultManager
  vaultAddress__averageFeeArrPerSecond
  vaultAddress__totalSnapshots
  vaultAddress__annualFeeARR
  vaultAddress__dailyFeeAPR
  vaultAddress__weeklyFeeAPR
  vaultAddress__totalValueLockedToken0
  vaultAddress__totalValueLockedToken1
  totalAmount0
  totalAmount1
  sqrtPriceX96
  totalSupply
  fees1
  fees0
}

type PrevWeeklyVaultSnapshot {
  id: ID!
  timestamp: BigInt!
  vaultAddress: Vault!
  totalAmount0: BigInt!
  totalAmount1: BigInt!
  sqrtPriceX96: BigInt!
  totalSupply: BigInt!
  fees1: BigInt!
  fees0: BigInt!
  averageFeeArrPerSecond: BigDecimal!
  totalSnapshots: BigInt!
  weeklyFeeApr: BigDecimal!
}

input PrevWeeklyVaultSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  vaultAddress_: Vault_filter
  totalAmount0: BigInt
  totalAmount0_not: BigInt
  totalAmount0_gt: BigInt
  totalAmount0_lt: BigInt
  totalAmount0_gte: BigInt
  totalAmount0_lte: BigInt
  totalAmount0_in: [BigInt!]
  totalAmount0_not_in: [BigInt!]
  totalAmount1: BigInt
  totalAmount1_not: BigInt
  totalAmount1_gt: BigInt
  totalAmount1_lt: BigInt
  totalAmount1_gte: BigInt
  totalAmount1_lte: BigInt
  totalAmount1_in: [BigInt!]
  totalAmount1_not_in: [BigInt!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  fees1: BigInt
  fees1_not: BigInt
  fees1_gt: BigInt
  fees1_lt: BigInt
  fees1_gte: BigInt
  fees1_lte: BigInt
  fees1_in: [BigInt!]
  fees1_not_in: [BigInt!]
  fees0: BigInt
  fees0_not: BigInt
  fees0_gt: BigInt
  fees0_lt: BigInt
  fees0_gte: BigInt
  fees0_lte: BigInt
  fees0_in: [BigInt!]
  fees0_not_in: [BigInt!]
  averageFeeArrPerSecond: BigDecimal
  averageFeeArrPerSecond_not: BigDecimal
  averageFeeArrPerSecond_gt: BigDecimal
  averageFeeArrPerSecond_lt: BigDecimal
  averageFeeArrPerSecond_gte: BigDecimal
  averageFeeArrPerSecond_lte: BigDecimal
  averageFeeArrPerSecond_in: [BigDecimal!]
  averageFeeArrPerSecond_not_in: [BigDecimal!]
  totalSnapshots: BigInt
  totalSnapshots_not: BigInt
  totalSnapshots_gt: BigInt
  totalSnapshots_lt: BigInt
  totalSnapshots_gte: BigInt
  totalSnapshots_lte: BigInt
  totalSnapshots_in: [BigInt!]
  totalSnapshots_not_in: [BigInt!]
  weeklyFeeApr: BigDecimal
  weeklyFeeApr_not: BigDecimal
  weeklyFeeApr_gt: BigDecimal
  weeklyFeeApr_lt: BigDecimal
  weeklyFeeApr_gte: BigDecimal
  weeklyFeeApr_lte: BigDecimal
  weeklyFeeApr_in: [BigDecimal!]
  weeklyFeeApr_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PrevWeeklyVaultSnapshot_filter]
  or: [PrevWeeklyVaultSnapshot_filter]
}

enum PrevWeeklyVaultSnapshot_orderBy {
  id
  timestamp
  vaultAddress
  vaultAddress__id
  vaultAddress__deployer
  vaultAddress__token0
  vaultAddress__token1
  vaultAddress__totalAmount0
  vaultAddress__totalAmount1
  vaultAddress__createdAt
  vaultAddress__lastSnapshot
  vaultAddress__pool
  vaultAddress__state
  vaultAddress__annualPercentageYield
  vaultAddress__annualPercentageDailyYield
  vaultAddress__annualPercentageMonthlyYield
  vaultAddress__annualPercentageYearlyYield
  vaultAddress__lastTotalT0ValuePerLPT
  vaultAddress__accruedStrategistFees0
  vaultAddress__accruedStrategistFees1
  vaultAddress__fees0
  vaultAddress__fees1
  vaultAddress__beaconName
  vaultAddress__gasUsed
  vaultAddress__gasDeposited
  vaultAddress__totalLPTokensIssued
  vaultAddress__token1Symbol
  vaultAddress__decimals
  vaultAddress__feeTier
  vaultAddress__name
  vaultAddress__symbol
  vaultAddress__token0Balance
  vaultAddress__token0Decimals
  vaultAddress__token0Name
  vaultAddress__token0Symbol
  vaultAddress__token1Balance
  vaultAddress__token1Decimals
  vaultAddress__token1Name
  vaultAddress__payloadIpfs
  vaultAddress__vaultManager
  vaultAddress__averageFeeArrPerSecond
  vaultAddress__totalSnapshots
  vaultAddress__annualFeeARR
  vaultAddress__dailyFeeAPR
  vaultAddress__weeklyFeeAPR
  vaultAddress__totalValueLockedToken0
  vaultAddress__totalValueLockedToken1
  totalAmount0
  totalAmount1
  sqrtPriceX96
  totalSupply
  fees1
  fees0
  averageFeeArrPerSecond
  totalSnapshots
  weeklyFeeApr
}

type Query {
  keeper(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Keeper
  keepers(
    skip: Int = 0
    first: Int = 100
    orderBy: Keeper_orderBy
    orderDirection: OrderDirection
    where: Keeper_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Keeper!]!
  runner(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Runner
  runners(
    skip: Int = 0
    first: Int = 100
    orderBy: Runner_orderBy
    orderDirection: OrderDirection
    where: Runner_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Runner!]!
  queueTimeline(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): QueueTimeline
  queueTimelines(
    skip: Int = 0
    first: Int = 100
    orderBy: QueueTimeline_orderBy
    orderDirection: OrderDirection
    where: QueueTimeline_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [QueueTimeline!]!
  permissionUpdate(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PermissionUpdate
  permissionUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: PermissionUpdate_orderBy
    orderDirection: OrderDirection
    where: PermissionUpdate_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PermissionUpdate!]!
  orchestratorAction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrchestratorAction
  orchestratorActions(
    skip: Int = 0
    first: Int = 100
    orderBy: OrchestratorAction_orderBy
    orderDirection: OrderDirection
    where: OrchestratorAction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrchestratorAction!]!
  vote(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  actionFailure(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActionFailure
  actionFailures(
    skip: Int = 0
    first: Int = 100
    orderBy: ActionFailure_orderBy
    orderDirection: OrderDirection
    where: ActionFailure_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActionFailure!]!
  creator(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Creator
  creators(
    skip: Int = 0
    first: Int = 100
    orderBy: Creator_orderBy
    orderDirection: OrderDirection
    where: Creator_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Creator!]!
  creatorWithdrawal(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CreatorWithdrawal
  creatorWithdrawals(
    skip: Int = 0
    first: Int = 100
    orderBy: CreatorWithdrawal_orderBy
    orderDirection: OrderDirection
    where: CreatorWithdrawal_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CreatorWithdrawal!]!
  strategy(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Strategy
  strategies(
    skip: Int = 0
    first: Int = 100
    orderBy: Strategy_orderBy
    orderDirection: OrderDirection
    where: Strategy_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Strategy!]!
  vault(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  vaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultSnapshot
  vaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: VaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultSnapshot!]!
  prevVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevVaultSnapshot
  prevVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevVaultSnapshot!]!
  prevDailyVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevDailyVaultSnapshot
  prevDailyVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevDailyVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevDailyVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevDailyVaultSnapshot!]!
  prevMonthlyVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevMonthlyVaultSnapshot
  prevMonthlyVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevMonthlyVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevMonthlyVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevMonthlyVaultSnapshot!]!
  prevAnnualVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevAnnualVaultSnapshot
  prevAnnualVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevAnnualVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevAnnualVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevAnnualVaultSnapshot!]!
  prevWeeklyVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevWeeklyVaultSnapshot
  prevWeeklyVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevWeeklyVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevWeeklyVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevWeeklyVaultSnapshot!]!
  vaultStateChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultStateChanged
  vaultStateChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultStateChanged_orderBy
    orderDirection: OrderDirection
    where: VaultStateChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultStateChanged!]!
  vaultDeposit(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultDeposit
  vaultDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultDeposit_orderBy
    orderDirection: OrderDirection
    where: VaultDeposit_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultDeposit!]!
  vaultWithdraw(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultWithdraw
  vaultWithdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultWithdraw_orderBy
    orderDirection: OrderDirection
    where: VaultWithdraw_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultWithdraw!]!
  depositor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Depositor
  depositors(
    skip: Int = 0
    first: Int = 100
    orderBy: Depositor_orderBy
    orderDirection: OrderDirection
    where: Depositor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Depositor!]!
  vaultBeacon(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultBeacon
  vaultBeacons(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultBeacon_orderBy
    orderDirection: OrderDirection
    where: VaultBeacon_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultBeacon!]!
  vaultPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultPosition
  vaultPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultPosition_orderBy
    orderDirection: OrderDirection
    where: VaultPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultPosition!]!
  liquiditySteer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquiditySteer
  liquiditySteers(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquiditySteer_orderBy
    orderDirection: OrderDirection
    where: LiquiditySteer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquiditySteer!]!
  orchestratorReward(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrchestratorReward
  orchestratorRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: OrchestratorReward_orderBy
    orderDirection: OrderDirection
    where: OrchestratorReward_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrchestratorReward!]!
  orchestratorRewardTracker(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrchestratorRewardTracker
  orchestratorRewardTrackers(
    skip: Int = 0
    first: Int = 100
    orderBy: OrchestratorRewardTracker_orderBy
    orderDirection: OrderDirection
    where: OrchestratorRewardTracker_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrchestratorRewardTracker!]!
  orchestratorRewardSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrchestratorRewardSnapshot
  orchestratorRewardSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: OrchestratorRewardSnapshot_orderBy
    orderDirection: OrderDirection
    where: OrchestratorRewardSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrchestratorRewardSnapshot!]!
  bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  job(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Job
  jobs(
    skip: Int = 0
    first: Int = 100
    orderBy: Job_orderBy
    orderDirection: OrderDirection
    where: Job_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Job!]!
  jobExecution(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): JobExecution
  jobExecutions(
    skip: Int = 0
    first: Int = 100
    orderBy: JobExecution_orderBy
    orderDirection: OrderDirection
    where: JobExecution_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [JobExecution!]!
  jobGasDeposited(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): JobGasDeposited
  jobGasDepositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: JobGasDeposited_orderBy
    orderDirection: OrderDirection
    where: JobGasDeposited_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [JobGasDeposited!]!
  jobGasWithdrawn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): JobGasWithdrawn
  jobGasWithdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: JobGasWithdrawn_orderBy
    orderDirection: OrderDirection
    where: JobGasWithdrawn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [JobGasWithdrawn!]!
  vaultGasUsed(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultGasUsed
  vaultGasUseds(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultGasUsed_orderBy
    orderDirection: OrderDirection
    where: VaultGasUsed_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultGasUsed!]!
  vaultGasDeposited(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultGasDeposited
  vaultGasDepositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultGasDeposited_orderBy
    orderDirection: OrderDirection
    where: VaultGasDeposited_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultGasDeposited!]!
  vaultGasWithdrawn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultGasWithdrawn
  vaultGasWithdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultGasWithdrawn_orderBy
    orderDirection: OrderDirection
    where: VaultGasWithdrawn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultGasWithdrawn!]!
  whiteListManager(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhiteListManager
  whiteListManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: WhiteListManager_orderBy
    orderDirection: OrderDirection
    where: WhiteListManager_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WhiteListManager!]!
  whiteListVaultPermission(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhiteListVaultPermission
  whiteListVaultPermissions(
    skip: Int = 0
    first: Int = 100
    orderBy: WhiteListVaultPermission_orderBy
    orderDirection: OrderDirection
    where: WhiteListVaultPermission_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WhiteListVaultPermission!]!
  leaderBoard(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LeaderBoard
  leaderBoards(
    skip: Int = 0
    first: Int = 100
    orderBy: LeaderBoard_orderBy
    orderDirection: OrderDirection
    where: LeaderBoard_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LeaderBoard!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type QueueTimeline {
  id: ID!
  keeper: Keeper!
  timeDelay: BigInt!
  queued: Boolean!
}

input QueueTimeline_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  keeper: String
  keeper_not: String
  keeper_gt: String
  keeper_lt: String
  keeper_gte: String
  keeper_lte: String
  keeper_in: [String!]
  keeper_not_in: [String!]
  keeper_contains: String
  keeper_contains_nocase: String
  keeper_not_contains: String
  keeper_not_contains_nocase: String
  keeper_starts_with: String
  keeper_starts_with_nocase: String
  keeper_not_starts_with: String
  keeper_not_starts_with_nocase: String
  keeper_ends_with: String
  keeper_ends_with_nocase: String
  keeper_not_ends_with: String
  keeper_not_ends_with_nocase: String
  keeper_: Keeper_filter
  timeDelay: BigInt
  timeDelay_not: BigInt
  timeDelay_gt: BigInt
  timeDelay_lt: BigInt
  timeDelay_gte: BigInt
  timeDelay_lte: BigInt
  timeDelay_in: [BigInt!]
  timeDelay_not_in: [BigInt!]
  queued: Boolean
  queued_not: Boolean
  queued_in: [Boolean!]
  queued_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [QueueTimeline_filter]
  or: [QueueTimeline_filter]
}

enum QueueTimeline_orderBy {
  id
  keeper
  keeper__id
  keeper__bondHeld
  keeper__index
  keeper__status
  timeDelay
  queued
}

type Runner {
  id: ID!
  bondHeld: BigInt!

  """Time when the runner was created"""
  createdAt: BigInt!
}

input Runner_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bondHeld: BigInt
  bondHeld_not: BigInt
  bondHeld_gt: BigInt
  bondHeld_lt: BigInt
  bondHeld_gte: BigInt
  bondHeld_lte: BigInt
  bondHeld_in: [BigInt!]
  bondHeld_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Runner_filter]
  or: [Runner_filter]
}

enum Runner_orderBy {
  id
  bondHeld
  createdAt
}

type Strategy {
  id: ID!
  name: String!
  vault(skip: Int = 0, first: Int = 100, orderBy: Vault_orderBy, orderDirection: OrderDirection, where: Vault_filter): [Vault!]!
  createdAt: BigInt!
  admin: String!
  creator: Creator!
  executionBundle: String!
}

input Strategy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  vault_: Vault_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  admin: String
  admin_not: String
  admin_gt: String
  admin_lt: String
  admin_gte: String
  admin_lte: String
  admin_in: [String!]
  admin_not_in: [String!]
  admin_contains: String
  admin_contains_nocase: String
  admin_not_contains: String
  admin_not_contains_nocase: String
  admin_starts_with: String
  admin_starts_with_nocase: String
  admin_not_starts_with: String
  admin_not_starts_with_nocase: String
  admin_ends_with: String
  admin_ends_with_nocase: String
  admin_not_ends_with: String
  admin_not_ends_with_nocase: String
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: Creator_filter
  executionBundle: String
  executionBundle_not: String
  executionBundle_gt: String
  executionBundle_lt: String
  executionBundle_gte: String
  executionBundle_lte: String
  executionBundle_in: [String!]
  executionBundle_not_in: [String!]
  executionBundle_contains: String
  executionBundle_contains_nocase: String
  executionBundle_not_contains: String
  executionBundle_not_contains_nocase: String
  executionBundle_starts_with: String
  executionBundle_starts_with_nocase: String
  executionBundle_not_starts_with: String
  executionBundle_not_starts_with_nocase: String
  executionBundle_ends_with: String
  executionBundle_ends_with_nocase: String
  executionBundle_not_ends_with: String
  executionBundle_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Strategy_filter]
  or: [Strategy_filter]
}

enum Strategy_orderBy {
  id
  name
  vault
  createdAt
  admin
  creator
  creator__id
  creator__revenue
  creator__totalValueLocked
  creator__totalYield
  executionBundle
}

type Subscription {
  keeper(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Keeper
  keepers(
    skip: Int = 0
    first: Int = 100
    orderBy: Keeper_orderBy
    orderDirection: OrderDirection
    where: Keeper_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Keeper!]!
  runner(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Runner
  runners(
    skip: Int = 0
    first: Int = 100
    orderBy: Runner_orderBy
    orderDirection: OrderDirection
    where: Runner_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Runner!]!
  queueTimeline(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): QueueTimeline
  queueTimelines(
    skip: Int = 0
    first: Int = 100
    orderBy: QueueTimeline_orderBy
    orderDirection: OrderDirection
    where: QueueTimeline_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [QueueTimeline!]!
  permissionUpdate(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PermissionUpdate
  permissionUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: PermissionUpdate_orderBy
    orderDirection: OrderDirection
    where: PermissionUpdate_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PermissionUpdate!]!
  orchestratorAction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrchestratorAction
  orchestratorActions(
    skip: Int = 0
    first: Int = 100
    orderBy: OrchestratorAction_orderBy
    orderDirection: OrderDirection
    where: OrchestratorAction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrchestratorAction!]!
  vote(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  actionFailure(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActionFailure
  actionFailures(
    skip: Int = 0
    first: Int = 100
    orderBy: ActionFailure_orderBy
    orderDirection: OrderDirection
    where: ActionFailure_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActionFailure!]!
  creator(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Creator
  creators(
    skip: Int = 0
    first: Int = 100
    orderBy: Creator_orderBy
    orderDirection: OrderDirection
    where: Creator_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Creator!]!
  creatorWithdrawal(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CreatorWithdrawal
  creatorWithdrawals(
    skip: Int = 0
    first: Int = 100
    orderBy: CreatorWithdrawal_orderBy
    orderDirection: OrderDirection
    where: CreatorWithdrawal_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CreatorWithdrawal!]!
  strategy(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Strategy
  strategies(
    skip: Int = 0
    first: Int = 100
    orderBy: Strategy_orderBy
    orderDirection: OrderDirection
    where: Strategy_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Strategy!]!
  vault(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  vaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultSnapshot
  vaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: VaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultSnapshot!]!
  prevVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevVaultSnapshot
  prevVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevVaultSnapshot!]!
  prevDailyVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevDailyVaultSnapshot
  prevDailyVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevDailyVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevDailyVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevDailyVaultSnapshot!]!
  prevMonthlyVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevMonthlyVaultSnapshot
  prevMonthlyVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevMonthlyVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevMonthlyVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevMonthlyVaultSnapshot!]!
  prevAnnualVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevAnnualVaultSnapshot
  prevAnnualVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevAnnualVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevAnnualVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevAnnualVaultSnapshot!]!
  prevWeeklyVaultSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PrevWeeklyVaultSnapshot
  prevWeeklyVaultSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PrevWeeklyVaultSnapshot_orderBy
    orderDirection: OrderDirection
    where: PrevWeeklyVaultSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PrevWeeklyVaultSnapshot!]!
  vaultStateChanged(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultStateChanged
  vaultStateChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultStateChanged_orderBy
    orderDirection: OrderDirection
    where: VaultStateChanged_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultStateChanged!]!
  vaultDeposit(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultDeposit
  vaultDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultDeposit_orderBy
    orderDirection: OrderDirection
    where: VaultDeposit_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultDeposit!]!
  vaultWithdraw(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultWithdraw
  vaultWithdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultWithdraw_orderBy
    orderDirection: OrderDirection
    where: VaultWithdraw_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultWithdraw!]!
  depositor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Depositor
  depositors(
    skip: Int = 0
    first: Int = 100
    orderBy: Depositor_orderBy
    orderDirection: OrderDirection
    where: Depositor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Depositor!]!
  vaultBeacon(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultBeacon
  vaultBeacons(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultBeacon_orderBy
    orderDirection: OrderDirection
    where: VaultBeacon_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultBeacon!]!
  vaultPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultPosition
  vaultPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultPosition_orderBy
    orderDirection: OrderDirection
    where: VaultPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultPosition!]!
  liquiditySteer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquiditySteer
  liquiditySteers(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquiditySteer_orderBy
    orderDirection: OrderDirection
    where: LiquiditySteer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquiditySteer!]!
  orchestratorReward(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrchestratorReward
  orchestratorRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: OrchestratorReward_orderBy
    orderDirection: OrderDirection
    where: OrchestratorReward_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrchestratorReward!]!
  orchestratorRewardTracker(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrchestratorRewardTracker
  orchestratorRewardTrackers(
    skip: Int = 0
    first: Int = 100
    orderBy: OrchestratorRewardTracker_orderBy
    orderDirection: OrderDirection
    where: OrchestratorRewardTracker_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrchestratorRewardTracker!]!
  orchestratorRewardSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrchestratorRewardSnapshot
  orchestratorRewardSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: OrchestratorRewardSnapshot_orderBy
    orderDirection: OrderDirection
    where: OrchestratorRewardSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrchestratorRewardSnapshot!]!
  bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  job(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Job
  jobs(
    skip: Int = 0
    first: Int = 100
    orderBy: Job_orderBy
    orderDirection: OrderDirection
    where: Job_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Job!]!
  jobExecution(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): JobExecution
  jobExecutions(
    skip: Int = 0
    first: Int = 100
    orderBy: JobExecution_orderBy
    orderDirection: OrderDirection
    where: JobExecution_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [JobExecution!]!
  jobGasDeposited(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): JobGasDeposited
  jobGasDepositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: JobGasDeposited_orderBy
    orderDirection: OrderDirection
    where: JobGasDeposited_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [JobGasDeposited!]!
  jobGasWithdrawn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): JobGasWithdrawn
  jobGasWithdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: JobGasWithdrawn_orderBy
    orderDirection: OrderDirection
    where: JobGasWithdrawn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [JobGasWithdrawn!]!
  vaultGasUsed(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultGasUsed
  vaultGasUseds(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultGasUsed_orderBy
    orderDirection: OrderDirection
    where: VaultGasUsed_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultGasUsed!]!
  vaultGasDeposited(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultGasDeposited
  vaultGasDepositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultGasDeposited_orderBy
    orderDirection: OrderDirection
    where: VaultGasDeposited_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultGasDeposited!]!
  vaultGasWithdrawn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultGasWithdrawn
  vaultGasWithdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultGasWithdrawn_orderBy
    orderDirection: OrderDirection
    where: VaultGasWithdrawn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultGasWithdrawn!]!
  whiteListManager(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhiteListManager
  whiteListManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: WhiteListManager_orderBy
    orderDirection: OrderDirection
    where: WhiteListManager_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WhiteListManager!]!
  whiteListVaultPermission(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhiteListVaultPermission
  whiteListVaultPermissions(
    skip: Int = 0
    first: Int = 100
    orderBy: WhiteListVaultPermission_orderBy
    orderDirection: OrderDirection
    where: WhiteListVaultPermission_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WhiteListVaultPermission!]!
  leaderBoard(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LeaderBoard
  leaderBoards(
    skip: Int = 0
    first: Int = 100
    orderBy: LeaderBoard_orderBy
    orderDirection: OrderDirection
    where: LeaderBoard_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LeaderBoard!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"A string representation of microseconds UNIX timestamp (16 digits)\n"
scalar Timestamp

type Vault {
  id: ID!
  deployer: String!
  token0: String!
  token1: String!
  totalAmount0: BigDecimal!
  totalAmount1: BigDecimal!
  createdAt: BigInt!
  lastSnapshot: BigInt!
  pool: String!
  state: BigInt!
  statusUpdates(skip: Int = 0, first: Int = 100, orderBy: VaultStateChanged_orderBy, orderDirection: OrderDirection, where: VaultStateChanged_filter): [VaultStateChanged!]!
  strategyToken: Strategy!

  """Statistics"""
  snapshots(skip: Int = 0, first: Int = 100, orderBy: VaultSnapshot_orderBy, orderDirection: OrderDirection, where: VaultSnapshot_filter): [VaultSnapshot!]!
  permissions(skip: Int = 0, first: Int = 100, orderBy: WhiteListVaultPermission_orderBy, orderDirection: OrderDirection, where: WhiteListVaultPermission_filter): [WhiteListVaultPermission!]!
  positions(skip: Int = 0, first: Int = 100, orderBy: VaultPosition_orderBy, orderDirection: OrderDirection, where: VaultPosition_filter): [VaultPosition!]!
  depositors(skip: Int = 0, first: Int = 100, orderBy: Depositor_orderBy, orderDirection: OrderDirection, where: Depositor_filter): [Depositor!]!
  annualPercentageYield: BigDecimal!
  annualPercentageDailyYield: BigDecimal!
  annualPercentageMonthlyYield: BigDecimal!
  annualPercentageYearlyYield: BigDecimal!
  lastTotalT0ValuePerLPT: BigDecimal!
  accruedStrategistFees0: BigInt!
  accruedStrategistFees1: BigInt!
  fees0: BigInt!
  fees1: BigInt!
  beaconName: String!
  jobs(skip: Int = 0, first: Int = 100, orderBy: Job_orderBy, orderDirection: OrderDirection, where: Job_filter): [Job!]!
  gasUsed: BigInt!
  gasDeposited: BigInt!
  totalLPTokensIssued: BigInt!
  token1Symbol: String!
  decimals: BigInt!
  feeTier: BigInt!
  name: String!
  symbol: String!
  token0Balance: BigInt!
  token0Decimals: BigInt!
  token0Name: String!
  token0Symbol: String!
  token1Balance: BigInt!
  token1Decimals: BigInt!
  token1Name: String!
  payloadIpfs: String!
  vaultManager: String!
  averageFeeArrPerSecond: BigDecimal!
  totalSnapshots: BigInt!
  annualFeeARR: BigDecimal!
  dailyFeeAPR: BigDecimal!
  weeklyFeeAPR: BigDecimal!
  totalValueLockedToken0: BigDecimal!
  totalValueLockedToken1: BigDecimal!
}

type VaultBeacon {
  """Address of the VaultBeacon"""
  id: ID!
  address: String!

  """IPFS Config for Beacon"""
  ipfsHash: String!
  name: String!

  """Beacon status"""
  status: String!
  timestamp: BigInt!
  updateTimestamp: BigInt!
}

input VaultBeacon_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  ipfsHash: String
  ipfsHash_not: String
  ipfsHash_gt: String
  ipfsHash_lt: String
  ipfsHash_gte: String
  ipfsHash_lte: String
  ipfsHash_in: [String!]
  ipfsHash_not_in: [String!]
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  updateTimestamp: BigInt
  updateTimestamp_not: BigInt
  updateTimestamp_gt: BigInt
  updateTimestamp_lt: BigInt
  updateTimestamp_gte: BigInt
  updateTimestamp_lte: BigInt
  updateTimestamp_in: [BigInt!]
  updateTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultBeacon_filter]
  or: [VaultBeacon_filter]
}

enum VaultBeacon_orderBy {
  id
  address
  ipfsHash
  name
  status
  timestamp
  updateTimestamp
}

type VaultDeposit {
  """Address of the depositor"""
  id: ID!
  vault: Vault!

  """Amount of tokens deposited"""
  amount0: BigDecimal!
  amount1: BigDecimal!

  """Token Addresses"""
  token0: String!
  token1: String!
  sender: String!
  transactionHash: String!

  """Time when the deposit was made"""
  timeStamp: BigInt!
  shares: BigInt!
  executor: String!
  depositCaller: String!
}

input VaultDeposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  executor: String
  executor_not: String
  executor_gt: String
  executor_lt: String
  executor_gte: String
  executor_lte: String
  executor_in: [String!]
  executor_not_in: [String!]
  executor_contains: String
  executor_contains_nocase: String
  executor_not_contains: String
  executor_not_contains_nocase: String
  executor_starts_with: String
  executor_starts_with_nocase: String
  executor_not_starts_with: String
  executor_not_starts_with_nocase: String
  executor_ends_with: String
  executor_ends_with_nocase: String
  executor_not_ends_with: String
  executor_not_ends_with_nocase: String
  depositCaller: String
  depositCaller_not: String
  depositCaller_gt: String
  depositCaller_lt: String
  depositCaller_gte: String
  depositCaller_lte: String
  depositCaller_in: [String!]
  depositCaller_not_in: [String!]
  depositCaller_contains: String
  depositCaller_contains_nocase: String
  depositCaller_not_contains: String
  depositCaller_not_contains_nocase: String
  depositCaller_starts_with: String
  depositCaller_starts_with_nocase: String
  depositCaller_not_starts_with: String
  depositCaller_not_starts_with_nocase: String
  depositCaller_ends_with: String
  depositCaller_ends_with_nocase: String
  depositCaller_not_ends_with: String
  depositCaller_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultDeposit_filter]
  or: [VaultDeposit_filter]
}

enum VaultDeposit_orderBy {
  id
  vault
  vault__id
  vault__deployer
  vault__token0
  vault__token1
  vault__totalAmount0
  vault__totalAmount1
  vault__createdAt
  vault__lastSnapshot
  vault__pool
  vault__state
  vault__annualPercentageYield
  vault__annualPercentageDailyYield
  vault__annualPercentageMonthlyYield
  vault__annualPercentageYearlyYield
  vault__lastTotalT0ValuePerLPT
  vault__accruedStrategistFees0
  vault__accruedStrategistFees1
  vault__fees0
  vault__fees1
  vault__beaconName
  vault__gasUsed
  vault__gasDeposited
  vault__totalLPTokensIssued
  vault__token1Symbol
  vault__decimals
  vault__feeTier
  vault__name
  vault__symbol
  vault__token0Balance
  vault__token0Decimals
  vault__token0Name
  vault__token0Symbol
  vault__token1Balance
  vault__token1Decimals
  vault__token1Name
  vault__payloadIpfs
  vault__vaultManager
  vault__averageFeeArrPerSecond
  vault__totalSnapshots
  vault__annualFeeARR
  vault__dailyFeeAPR
  vault__weeklyFeeAPR
  vault__totalValueLockedToken0
  vault__totalValueLockedToken1
  amount0
  amount1
  token0
  token1
  sender
  transactionHash
  timeStamp
  shares
  executor
  depositCaller
}

type VaultGasDeposited {
  id: ID!
  timestamp: BigInt!
  vault: String!
  origin: String!
  amount: BigInt!
}

input VaultGasDeposited_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  origin: String
  origin_not: String
  origin_gt: String
  origin_lt: String
  origin_gte: String
  origin_lte: String
  origin_in: [String!]
  origin_not_in: [String!]
  origin_contains: String
  origin_contains_nocase: String
  origin_not_contains: String
  origin_not_contains_nocase: String
  origin_starts_with: String
  origin_starts_with_nocase: String
  origin_not_starts_with: String
  origin_not_starts_with_nocase: String
  origin_ends_with: String
  origin_ends_with_nocase: String
  origin_not_ends_with: String
  origin_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultGasDeposited_filter]
  or: [VaultGasDeposited_filter]
}

enum VaultGasDeposited_orderBy {
  id
  timestamp
  vault
  origin
  amount
}

type VaultGasUsed {
  id: ID!
  timestamp: BigInt!
  vault: String!
  actionHash: String
  amount: BigInt!
}

input VaultGasUsed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  actionHash: String
  actionHash_not: String
  actionHash_gt: String
  actionHash_lt: String
  actionHash_gte: String
  actionHash_lte: String
  actionHash_in: [String!]
  actionHash_not_in: [String!]
  actionHash_contains: String
  actionHash_contains_nocase: String
  actionHash_not_contains: String
  actionHash_not_contains_nocase: String
  actionHash_starts_with: String
  actionHash_starts_with_nocase: String
  actionHash_not_starts_with: String
  actionHash_not_starts_with_nocase: String
  actionHash_ends_with: String
  actionHash_ends_with_nocase: String
  actionHash_not_ends_with: String
  actionHash_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultGasUsed_filter]
  or: [VaultGasUsed_filter]
}

enum VaultGasUsed_orderBy {
  id
  timestamp
  vault
  actionHash
  amount
}

type VaultGasWithdrawn {
  id: ID!
  timestamp: BigInt!
  vault: String!
  to: String!
  amount: BigInt!
}

input VaultGasWithdrawn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultGasWithdrawn_filter]
  or: [VaultGasWithdrawn_filter]
}

enum VaultGasWithdrawn_orderBy {
  id
  timestamp
  vault
  to
  amount
}

type VaultPosition {
  id: ID!
  upperTick: [BigInt!]!
  lowerTick: [BigInt!]!
  vault: Vault!
  relativeWeight: [BigInt!]!
  timestamp: BigInt!
}

input VaultPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  upperTick: [BigInt!]
  upperTick_not: [BigInt!]
  upperTick_contains: [BigInt!]
  upperTick_contains_nocase: [BigInt!]
  upperTick_not_contains: [BigInt!]
  upperTick_not_contains_nocase: [BigInt!]
  lowerTick: [BigInt!]
  lowerTick_not: [BigInt!]
  lowerTick_contains: [BigInt!]
  lowerTick_contains_nocase: [BigInt!]
  lowerTick_not_contains: [BigInt!]
  lowerTick_not_contains_nocase: [BigInt!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  relativeWeight: [BigInt!]
  relativeWeight_not: [BigInt!]
  relativeWeight_contains: [BigInt!]
  relativeWeight_contains_nocase: [BigInt!]
  relativeWeight_not_contains: [BigInt!]
  relativeWeight_not_contains_nocase: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultPosition_filter]
  or: [VaultPosition_filter]
}

enum VaultPosition_orderBy {
  id
  upperTick
  lowerTick
  vault
  vault__id
  vault__deployer
  vault__token0
  vault__token1
  vault__totalAmount0
  vault__totalAmount1
  vault__createdAt
  vault__lastSnapshot
  vault__pool
  vault__state
  vault__annualPercentageYield
  vault__annualPercentageDailyYield
  vault__annualPercentageMonthlyYield
  vault__annualPercentageYearlyYield
  vault__lastTotalT0ValuePerLPT
  vault__accruedStrategistFees0
  vault__accruedStrategistFees1
  vault__fees0
  vault__fees1
  vault__beaconName
  vault__gasUsed
  vault__gasDeposited
  vault__totalLPTokensIssued
  vault__token1Symbol
  vault__decimals
  vault__feeTier
  vault__name
  vault__symbol
  vault__token0Balance
  vault__token0Decimals
  vault__token0Name
  vault__token0Symbol
  vault__token1Balance
  vault__token1Decimals
  vault__token1Name
  vault__payloadIpfs
  vault__vaultManager
  vault__averageFeeArrPerSecond
  vault__totalSnapshots
  vault__annualFeeARR
  vault__dailyFeeAPR
  vault__weeklyFeeAPR
  vault__totalValueLockedToken0
  vault__totalValueLockedToken1
  relativeWeight
  timestamp
}

type VaultSnapshot {
  id: ID!
  timestamp: BigInt!
  vaultAddress: Vault!
  totalAmount0: BigInt!
  totalAmount1: BigInt!
  sqrtPriceX96: BigInt!
  totalSupply: BigInt!
  fees1: BigInt!
  fees0: BigInt!
  annualFeeAPR: BigDecimal!
  dailyFeeAPR: BigDecimal!
  weeklyFeeAPR: BigDecimal!
  transactionHash: String!
}

input VaultSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  vaultAddress_: Vault_filter
  totalAmount0: BigInt
  totalAmount0_not: BigInt
  totalAmount0_gt: BigInt
  totalAmount0_lt: BigInt
  totalAmount0_gte: BigInt
  totalAmount0_lte: BigInt
  totalAmount0_in: [BigInt!]
  totalAmount0_not_in: [BigInt!]
  totalAmount1: BigInt
  totalAmount1_not: BigInt
  totalAmount1_gt: BigInt
  totalAmount1_lt: BigInt
  totalAmount1_gte: BigInt
  totalAmount1_lte: BigInt
  totalAmount1_in: [BigInt!]
  totalAmount1_not_in: [BigInt!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  fees1: BigInt
  fees1_not: BigInt
  fees1_gt: BigInt
  fees1_lt: BigInt
  fees1_gte: BigInt
  fees1_lte: BigInt
  fees1_in: [BigInt!]
  fees1_not_in: [BigInt!]
  fees0: BigInt
  fees0_not: BigInt
  fees0_gt: BigInt
  fees0_lt: BigInt
  fees0_gte: BigInt
  fees0_lte: BigInt
  fees0_in: [BigInt!]
  fees0_not_in: [BigInt!]
  annualFeeAPR: BigDecimal
  annualFeeAPR_not: BigDecimal
  annualFeeAPR_gt: BigDecimal
  annualFeeAPR_lt: BigDecimal
  annualFeeAPR_gte: BigDecimal
  annualFeeAPR_lte: BigDecimal
  annualFeeAPR_in: [BigDecimal!]
  annualFeeAPR_not_in: [BigDecimal!]
  dailyFeeAPR: BigDecimal
  dailyFeeAPR_not: BigDecimal
  dailyFeeAPR_gt: BigDecimal
  dailyFeeAPR_lt: BigDecimal
  dailyFeeAPR_gte: BigDecimal
  dailyFeeAPR_lte: BigDecimal
  dailyFeeAPR_in: [BigDecimal!]
  dailyFeeAPR_not_in: [BigDecimal!]
  weeklyFeeAPR: BigDecimal
  weeklyFeeAPR_not: BigDecimal
  weeklyFeeAPR_gt: BigDecimal
  weeklyFeeAPR_lt: BigDecimal
  weeklyFeeAPR_gte: BigDecimal
  weeklyFeeAPR_lte: BigDecimal
  weeklyFeeAPR_in: [BigDecimal!]
  weeklyFeeAPR_not_in: [BigDecimal!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultSnapshot_filter]
  or: [VaultSnapshot_filter]
}

enum VaultSnapshot_orderBy {
  id
  timestamp
  vaultAddress
  vaultAddress__id
  vaultAddress__deployer
  vaultAddress__token0
  vaultAddress__token1
  vaultAddress__totalAmount0
  vaultAddress__totalAmount1
  vaultAddress__createdAt
  vaultAddress__lastSnapshot
  vaultAddress__pool
  vaultAddress__state
  vaultAddress__annualPercentageYield
  vaultAddress__annualPercentageDailyYield
  vaultAddress__annualPercentageMonthlyYield
  vaultAddress__annualPercentageYearlyYield
  vaultAddress__lastTotalT0ValuePerLPT
  vaultAddress__accruedStrategistFees0
  vaultAddress__accruedStrategistFees1
  vaultAddress__fees0
  vaultAddress__fees1
  vaultAddress__beaconName
  vaultAddress__gasUsed
  vaultAddress__gasDeposited
  vaultAddress__totalLPTokensIssued
  vaultAddress__token1Symbol
  vaultAddress__decimals
  vaultAddress__feeTier
  vaultAddress__name
  vaultAddress__symbol
  vaultAddress__token0Balance
  vaultAddress__token0Decimals
  vaultAddress__token0Name
  vaultAddress__token0Symbol
  vaultAddress__token1Balance
  vaultAddress__token1Decimals
  vaultAddress__token1Name
  vaultAddress__payloadIpfs
  vaultAddress__vaultManager
  vaultAddress__averageFeeArrPerSecond
  vaultAddress__totalSnapshots
  vaultAddress__annualFeeARR
  vaultAddress__dailyFeeAPR
  vaultAddress__weeklyFeeAPR
  vaultAddress__totalValueLockedToken0
  vaultAddress__totalValueLockedToken1
  totalAmount0
  totalAmount1
  sqrtPriceX96
  totalSupply
  fees1
  fees0
  annualFeeAPR
  dailyFeeAPR
  weeklyFeeAPR
  transactionHash
}

type VaultStateChanged {
  id: ID!
  timeStamp: BigInt!
  vault: Vault!
  status: BigInt!
}

input VaultStateChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  status: BigInt
  status_not: BigInt
  status_gt: BigInt
  status_lt: BigInt
  status_gte: BigInt
  status_lte: BigInt
  status_in: [BigInt!]
  status_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultStateChanged_filter]
  or: [VaultStateChanged_filter]
}

enum VaultStateChanged_orderBy {
  id
  timeStamp
  vault
  vault__id
  vault__deployer
  vault__token0
  vault__token1
  vault__totalAmount0
  vault__totalAmount1
  vault__createdAt
  vault__lastSnapshot
  vault__pool
  vault__state
  vault__annualPercentageYield
  vault__annualPercentageDailyYield
  vault__annualPercentageMonthlyYield
  vault__annualPercentageYearlyYield
  vault__lastTotalT0ValuePerLPT
  vault__accruedStrategistFees0
  vault__accruedStrategistFees1
  vault__fees0
  vault__fees1
  vault__beaconName
  vault__gasUsed
  vault__gasDeposited
  vault__totalLPTokensIssued
  vault__token1Symbol
  vault__decimals
  vault__feeTier
  vault__name
  vault__symbol
  vault__token0Balance
  vault__token0Decimals
  vault__token0Name
  vault__token0Symbol
  vault__token1Balance
  vault__token1Decimals
  vault__token1Name
  vault__payloadIpfs
  vault__vaultManager
  vault__averageFeeArrPerSecond
  vault__totalSnapshots
  vault__annualFeeARR
  vault__dailyFeeAPR
  vault__weeklyFeeAPR
  vault__totalValueLockedToken0
  vault__totalValueLockedToken1
  status
}

type VaultWithdraw {
  """Address of the withdrawer"""
  id: ID!
  vault: Vault!

  """Amount of tokens withdrawn"""
  amount0: BigDecimal!
  amount1: BigDecimal!

  """Token Addresses"""
  token0: String!
  token1: String!

  """Time when the withdraw was made"""
  timeStamp: BigInt!
  sender: String!
  transactionHash: String!
}

input VaultWithdraw_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  timeStamp: BigInt
  timeStamp_not: BigInt
  timeStamp_gt: BigInt
  timeStamp_lt: BigInt
  timeStamp_gte: BigInt
  timeStamp_lte: BigInt
  timeStamp_in: [BigInt!]
  timeStamp_not_in: [BigInt!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultWithdraw_filter]
  or: [VaultWithdraw_filter]
}

enum VaultWithdraw_orderBy {
  id
  vault
  vault__id
  vault__deployer
  vault__token0
  vault__token1
  vault__totalAmount0
  vault__totalAmount1
  vault__createdAt
  vault__lastSnapshot
  vault__pool
  vault__state
  vault__annualPercentageYield
  vault__annualPercentageDailyYield
  vault__annualPercentageMonthlyYield
  vault__annualPercentageYearlyYield
  vault__lastTotalT0ValuePerLPT
  vault__accruedStrategistFees0
  vault__accruedStrategistFees1
  vault__fees0
  vault__fees1
  vault__beaconName
  vault__gasUsed
  vault__gasDeposited
  vault__totalLPTokensIssued
  vault__token1Symbol
  vault__decimals
  vault__feeTier
  vault__name
  vault__symbol
  vault__token0Balance
  vault__token0Decimals
  vault__token0Name
  vault__token0Symbol
  vault__token1Balance
  vault__token1Decimals
  vault__token1Name
  vault__payloadIpfs
  vault__vaultManager
  vault__averageFeeArrPerSecond
  vault__totalSnapshots
  vault__annualFeeARR
  vault__dailyFeeAPR
  vault__weeklyFeeAPR
  vault__totalValueLockedToken0
  vault__totalValueLockedToken1
  amount0
  amount1
  token0
  token1
  timeStamp
  sender
  transactionHash
}

input Vault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  deployer: String
  deployer_not: String
  deployer_gt: String
  deployer_lt: String
  deployer_gte: String
  deployer_lte: String
  deployer_in: [String!]
  deployer_not_in: [String!]
  deployer_contains: String
  deployer_contains_nocase: String
  deployer_not_contains: String
  deployer_not_contains_nocase: String
  deployer_starts_with: String
  deployer_starts_with_nocase: String
  deployer_not_starts_with: String
  deployer_not_starts_with_nocase: String
  deployer_ends_with: String
  deployer_ends_with_nocase: String
  deployer_not_ends_with: String
  deployer_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  totalAmount0: BigDecimal
  totalAmount0_not: BigDecimal
  totalAmount0_gt: BigDecimal
  totalAmount0_lt: BigDecimal
  totalAmount0_gte: BigDecimal
  totalAmount0_lte: BigDecimal
  totalAmount0_in: [BigDecimal!]
  totalAmount0_not_in: [BigDecimal!]
  totalAmount1: BigDecimal
  totalAmount1_not: BigDecimal
  totalAmount1_gt: BigDecimal
  totalAmount1_lt: BigDecimal
  totalAmount1_gte: BigDecimal
  totalAmount1_lte: BigDecimal
  totalAmount1_in: [BigDecimal!]
  totalAmount1_not_in: [BigDecimal!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  lastSnapshot: BigInt
  lastSnapshot_not: BigInt
  lastSnapshot_gt: BigInt
  lastSnapshot_lt: BigInt
  lastSnapshot_gte: BigInt
  lastSnapshot_lte: BigInt
  lastSnapshot_in: [BigInt!]
  lastSnapshot_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  state: BigInt
  state_not: BigInt
  state_gt: BigInt
  state_lt: BigInt
  state_gte: BigInt
  state_lte: BigInt
  state_in: [BigInt!]
  state_not_in: [BigInt!]
  statusUpdates_: VaultStateChanged_filter
  strategyToken: String
  strategyToken_not: String
  strategyToken_gt: String
  strategyToken_lt: String
  strategyToken_gte: String
  strategyToken_lte: String
  strategyToken_in: [String!]
  strategyToken_not_in: [String!]
  strategyToken_contains: String
  strategyToken_contains_nocase: String
  strategyToken_not_contains: String
  strategyToken_not_contains_nocase: String
  strategyToken_starts_with: String
  strategyToken_starts_with_nocase: String
  strategyToken_not_starts_with: String
  strategyToken_not_starts_with_nocase: String
  strategyToken_ends_with: String
  strategyToken_ends_with_nocase: String
  strategyToken_not_ends_with: String
  strategyToken_not_ends_with_nocase: String
  strategyToken_: Strategy_filter
  snapshots_: VaultSnapshot_filter
  permissions_: WhiteListVaultPermission_filter
  positions_: VaultPosition_filter
  depositors_: Depositor_filter
  annualPercentageYield: BigDecimal
  annualPercentageYield_not: BigDecimal
  annualPercentageYield_gt: BigDecimal
  annualPercentageYield_lt: BigDecimal
  annualPercentageYield_gte: BigDecimal
  annualPercentageYield_lte: BigDecimal
  annualPercentageYield_in: [BigDecimal!]
  annualPercentageYield_not_in: [BigDecimal!]
  annualPercentageDailyYield: BigDecimal
  annualPercentageDailyYield_not: BigDecimal
  annualPercentageDailyYield_gt: BigDecimal
  annualPercentageDailyYield_lt: BigDecimal
  annualPercentageDailyYield_gte: BigDecimal
  annualPercentageDailyYield_lte: BigDecimal
  annualPercentageDailyYield_in: [BigDecimal!]
  annualPercentageDailyYield_not_in: [BigDecimal!]
  annualPercentageMonthlyYield: BigDecimal
  annualPercentageMonthlyYield_not: BigDecimal
  annualPercentageMonthlyYield_gt: BigDecimal
  annualPercentageMonthlyYield_lt: BigDecimal
  annualPercentageMonthlyYield_gte: BigDecimal
  annualPercentageMonthlyYield_lte: BigDecimal
  annualPercentageMonthlyYield_in: [BigDecimal!]
  annualPercentageMonthlyYield_not_in: [BigDecimal!]
  annualPercentageYearlyYield: BigDecimal
  annualPercentageYearlyYield_not: BigDecimal
  annualPercentageYearlyYield_gt: BigDecimal
  annualPercentageYearlyYield_lt: BigDecimal
  annualPercentageYearlyYield_gte: BigDecimal
  annualPercentageYearlyYield_lte: BigDecimal
  annualPercentageYearlyYield_in: [BigDecimal!]
  annualPercentageYearlyYield_not_in: [BigDecimal!]
  lastTotalT0ValuePerLPT: BigDecimal
  lastTotalT0ValuePerLPT_not: BigDecimal
  lastTotalT0ValuePerLPT_gt: BigDecimal
  lastTotalT0ValuePerLPT_lt: BigDecimal
  lastTotalT0ValuePerLPT_gte: BigDecimal
  lastTotalT0ValuePerLPT_lte: BigDecimal
  lastTotalT0ValuePerLPT_in: [BigDecimal!]
  lastTotalT0ValuePerLPT_not_in: [BigDecimal!]
  accruedStrategistFees0: BigInt
  accruedStrategistFees0_not: BigInt
  accruedStrategistFees0_gt: BigInt
  accruedStrategistFees0_lt: BigInt
  accruedStrategistFees0_gte: BigInt
  accruedStrategistFees0_lte: BigInt
  accruedStrategistFees0_in: [BigInt!]
  accruedStrategistFees0_not_in: [BigInt!]
  accruedStrategistFees1: BigInt
  accruedStrategistFees1_not: BigInt
  accruedStrategistFees1_gt: BigInt
  accruedStrategistFees1_lt: BigInt
  accruedStrategistFees1_gte: BigInt
  accruedStrategistFees1_lte: BigInt
  accruedStrategistFees1_in: [BigInt!]
  accruedStrategistFees1_not_in: [BigInt!]
  fees0: BigInt
  fees0_not: BigInt
  fees0_gt: BigInt
  fees0_lt: BigInt
  fees0_gte: BigInt
  fees0_lte: BigInt
  fees0_in: [BigInt!]
  fees0_not_in: [BigInt!]
  fees1: BigInt
  fees1_not: BigInt
  fees1_gt: BigInt
  fees1_lt: BigInt
  fees1_gte: BigInt
  fees1_lte: BigInt
  fees1_in: [BigInt!]
  fees1_not_in: [BigInt!]
  beaconName: String
  beaconName_not: String
  beaconName_gt: String
  beaconName_lt: String
  beaconName_gte: String
  beaconName_lte: String
  beaconName_in: [String!]
  beaconName_not_in: [String!]
  beaconName_contains: String
  beaconName_contains_nocase: String
  beaconName_not_contains: String
  beaconName_not_contains_nocase: String
  beaconName_starts_with: String
  beaconName_starts_with_nocase: String
  beaconName_not_starts_with: String
  beaconName_not_starts_with_nocase: String
  beaconName_ends_with: String
  beaconName_ends_with_nocase: String
  beaconName_not_ends_with: String
  beaconName_not_ends_with_nocase: String
  jobs_: Job_filter
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasDeposited: BigInt
  gasDeposited_not: BigInt
  gasDeposited_gt: BigInt
  gasDeposited_lt: BigInt
  gasDeposited_gte: BigInt
  gasDeposited_lte: BigInt
  gasDeposited_in: [BigInt!]
  gasDeposited_not_in: [BigInt!]
  totalLPTokensIssued: BigInt
  totalLPTokensIssued_not: BigInt
  totalLPTokensIssued_gt: BigInt
  totalLPTokensIssued_lt: BigInt
  totalLPTokensIssued_gte: BigInt
  totalLPTokensIssued_lte: BigInt
  totalLPTokensIssued_in: [BigInt!]
  totalLPTokensIssued_not_in: [BigInt!]
  token1Symbol: String
  token1Symbol_not: String
  token1Symbol_gt: String
  token1Symbol_lt: String
  token1Symbol_gte: String
  token1Symbol_lte: String
  token1Symbol_in: [String!]
  token1Symbol_not_in: [String!]
  token1Symbol_contains: String
  token1Symbol_contains_nocase: String
  token1Symbol_not_contains: String
  token1Symbol_not_contains_nocase: String
  token1Symbol_starts_with: String
  token1Symbol_starts_with_nocase: String
  token1Symbol_not_starts_with: String
  token1Symbol_not_starts_with_nocase: String
  token1Symbol_ends_with: String
  token1Symbol_ends_with_nocase: String
  token1Symbol_not_ends_with: String
  token1Symbol_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  feeTier: BigInt
  feeTier_not: BigInt
  feeTier_gt: BigInt
  feeTier_lt: BigInt
  feeTier_gte: BigInt
  feeTier_lte: BigInt
  feeTier_in: [BigInt!]
  feeTier_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  token0Balance: BigInt
  token0Balance_not: BigInt
  token0Balance_gt: BigInt
  token0Balance_lt: BigInt
  token0Balance_gte: BigInt
  token0Balance_lte: BigInt
  token0Balance_in: [BigInt!]
  token0Balance_not_in: [BigInt!]
  token0Decimals: BigInt
  token0Decimals_not: BigInt
  token0Decimals_gt: BigInt
  token0Decimals_lt: BigInt
  token0Decimals_gte: BigInt
  token0Decimals_lte: BigInt
  token0Decimals_in: [BigInt!]
  token0Decimals_not_in: [BigInt!]
  token0Name: String
  token0Name_not: String
  token0Name_gt: String
  token0Name_lt: String
  token0Name_gte: String
  token0Name_lte: String
  token0Name_in: [String!]
  token0Name_not_in: [String!]
  token0Name_contains: String
  token0Name_contains_nocase: String
  token0Name_not_contains: String
  token0Name_not_contains_nocase: String
  token0Name_starts_with: String
  token0Name_starts_with_nocase: String
  token0Name_not_starts_with: String
  token0Name_not_starts_with_nocase: String
  token0Name_ends_with: String
  token0Name_ends_with_nocase: String
  token0Name_not_ends_with: String
  token0Name_not_ends_with_nocase: String
  token0Symbol: String
  token0Symbol_not: String
  token0Symbol_gt: String
  token0Symbol_lt: String
  token0Symbol_gte: String
  token0Symbol_lte: String
  token0Symbol_in: [String!]
  token0Symbol_not_in: [String!]
  token0Symbol_contains: String
  token0Symbol_contains_nocase: String
  token0Symbol_not_contains: String
  token0Symbol_not_contains_nocase: String
  token0Symbol_starts_with: String
  token0Symbol_starts_with_nocase: String
  token0Symbol_not_starts_with: String
  token0Symbol_not_starts_with_nocase: String
  token0Symbol_ends_with: String
  token0Symbol_ends_with_nocase: String
  token0Symbol_not_ends_with: String
  token0Symbol_not_ends_with_nocase: String
  token1Balance: BigInt
  token1Balance_not: BigInt
  token1Balance_gt: BigInt
  token1Balance_lt: BigInt
  token1Balance_gte: BigInt
  token1Balance_lte: BigInt
  token1Balance_in: [BigInt!]
  token1Balance_not_in: [BigInt!]
  token1Decimals: BigInt
  token1Decimals_not: BigInt
  token1Decimals_gt: BigInt
  token1Decimals_lt: BigInt
  token1Decimals_gte: BigInt
  token1Decimals_lte: BigInt
  token1Decimals_in: [BigInt!]
  token1Decimals_not_in: [BigInt!]
  token1Name: String
  token1Name_not: String
  token1Name_gt: String
  token1Name_lt: String
  token1Name_gte: String
  token1Name_lte: String
  token1Name_in: [String!]
  token1Name_not_in: [String!]
  token1Name_contains: String
  token1Name_contains_nocase: String
  token1Name_not_contains: String
  token1Name_not_contains_nocase: String
  token1Name_starts_with: String
  token1Name_starts_with_nocase: String
  token1Name_not_starts_with: String
  token1Name_not_starts_with_nocase: String
  token1Name_ends_with: String
  token1Name_ends_with_nocase: String
  token1Name_not_ends_with: String
  token1Name_not_ends_with_nocase: String
  payloadIpfs: String
  payloadIpfs_not: String
  payloadIpfs_gt: String
  payloadIpfs_lt: String
  payloadIpfs_gte: String
  payloadIpfs_lte: String
  payloadIpfs_in: [String!]
  payloadIpfs_not_in: [String!]
  payloadIpfs_contains: String
  payloadIpfs_contains_nocase: String
  payloadIpfs_not_contains: String
  payloadIpfs_not_contains_nocase: String
  payloadIpfs_starts_with: String
  payloadIpfs_starts_with_nocase: String
  payloadIpfs_not_starts_with: String
  payloadIpfs_not_starts_with_nocase: String
  payloadIpfs_ends_with: String
  payloadIpfs_ends_with_nocase: String
  payloadIpfs_not_ends_with: String
  payloadIpfs_not_ends_with_nocase: String
  vaultManager: String
  vaultManager_not: String
  vaultManager_gt: String
  vaultManager_lt: String
  vaultManager_gte: String
  vaultManager_lte: String
  vaultManager_in: [String!]
  vaultManager_not_in: [String!]
  vaultManager_contains: String
  vaultManager_contains_nocase: String
  vaultManager_not_contains: String
  vaultManager_not_contains_nocase: String
  vaultManager_starts_with: String
  vaultManager_starts_with_nocase: String
  vaultManager_not_starts_with: String
  vaultManager_not_starts_with_nocase: String
  vaultManager_ends_with: String
  vaultManager_ends_with_nocase: String
  vaultManager_not_ends_with: String
  vaultManager_not_ends_with_nocase: String
  averageFeeArrPerSecond: BigDecimal
  averageFeeArrPerSecond_not: BigDecimal
  averageFeeArrPerSecond_gt: BigDecimal
  averageFeeArrPerSecond_lt: BigDecimal
  averageFeeArrPerSecond_gte: BigDecimal
  averageFeeArrPerSecond_lte: BigDecimal
  averageFeeArrPerSecond_in: [BigDecimal!]
  averageFeeArrPerSecond_not_in: [BigDecimal!]
  totalSnapshots: BigInt
  totalSnapshots_not: BigInt
  totalSnapshots_gt: BigInt
  totalSnapshots_lt: BigInt
  totalSnapshots_gte: BigInt
  totalSnapshots_lte: BigInt
  totalSnapshots_in: [BigInt!]
  totalSnapshots_not_in: [BigInt!]
  annualFeeARR: BigDecimal
  annualFeeARR_not: BigDecimal
  annualFeeARR_gt: BigDecimal
  annualFeeARR_lt: BigDecimal
  annualFeeARR_gte: BigDecimal
  annualFeeARR_lte: BigDecimal
  annualFeeARR_in: [BigDecimal!]
  annualFeeARR_not_in: [BigDecimal!]
  dailyFeeAPR: BigDecimal
  dailyFeeAPR_not: BigDecimal
  dailyFeeAPR_gt: BigDecimal
  dailyFeeAPR_lt: BigDecimal
  dailyFeeAPR_gte: BigDecimal
  dailyFeeAPR_lte: BigDecimal
  dailyFeeAPR_in: [BigDecimal!]
  dailyFeeAPR_not_in: [BigDecimal!]
  weeklyFeeAPR: BigDecimal
  weeklyFeeAPR_not: BigDecimal
  weeklyFeeAPR_gt: BigDecimal
  weeklyFeeAPR_lt: BigDecimal
  weeklyFeeAPR_gte: BigDecimal
  weeklyFeeAPR_lte: BigDecimal
  weeklyFeeAPR_in: [BigDecimal!]
  weeklyFeeAPR_not_in: [BigDecimal!]
  totalValueLockedToken0: BigDecimal
  totalValueLockedToken0_not: BigDecimal
  totalValueLockedToken0_gt: BigDecimal
  totalValueLockedToken0_lt: BigDecimal
  totalValueLockedToken0_gte: BigDecimal
  totalValueLockedToken0_lte: BigDecimal
  totalValueLockedToken0_in: [BigDecimal!]
  totalValueLockedToken0_not_in: [BigDecimal!]
  totalValueLockedToken1: BigDecimal
  totalValueLockedToken1_not: BigDecimal
  totalValueLockedToken1_gt: BigDecimal
  totalValueLockedToken1_lt: BigDecimal
  totalValueLockedToken1_gte: BigDecimal
  totalValueLockedToken1_lte: BigDecimal
  totalValueLockedToken1_in: [BigDecimal!]
  totalValueLockedToken1_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Vault_filter]
  or: [Vault_filter]
}

enum Vault_orderBy {
  id
  deployer
  token0
  token1
  totalAmount0
  totalAmount1
  createdAt
  lastSnapshot
  pool
  state
  statusUpdates
  strategyToken
  strategyToken__id
  strategyToken__name
  strategyToken__createdAt
  strategyToken__admin
  strategyToken__executionBundle
  snapshots
  permissions
  positions
  depositors
  annualPercentageYield
  annualPercentageDailyYield
  annualPercentageMonthlyYield
  annualPercentageYearlyYield
  lastTotalT0ValuePerLPT
  accruedStrategistFees0
  accruedStrategistFees1
  fees0
  fees1
  beaconName
  jobs
  gasUsed
  gasDeposited
  totalLPTokensIssued
  token1Symbol
  decimals
  feeTier
  name
  symbol
  token0Balance
  token0Decimals
  token0Name
  token0Symbol
  token1Balance
  token1Decimals
  token1Name
  payloadIpfs
  vaultManager
  averageFeeArrPerSecond
  totalSnapshots
  annualFeeARR
  dailyFeeAPR
  weeklyFeeAPR
  totalValueLockedToken0
  totalValueLockedToken1
}

type Vote {
  id: ID!
  timestamp: BigInt!
  by: Keeper!
  action: OrchestratorAction!
}

input Vote_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  by: String
  by_not: String
  by_gt: String
  by_lt: String
  by_gte: String
  by_lte: String
  by_in: [String!]
  by_not_in: [String!]
  by_contains: String
  by_contains_nocase: String
  by_not_contains: String
  by_not_contains_nocase: String
  by_starts_with: String
  by_starts_with_nocase: String
  by_not_starts_with: String
  by_not_starts_with_nocase: String
  by_ends_with: String
  by_ends_with_nocase: String
  by_not_ends_with: String
  by_not_ends_with_nocase: String
  by_: Keeper_filter
  action: String
  action_not: String
  action_gt: String
  action_lt: String
  action_gte: String
  action_lte: String
  action_in: [String!]
  action_not_in: [String!]
  action_contains: String
  action_contains_nocase: String
  action_not_contains: String
  action_not_contains_nocase: String
  action_starts_with: String
  action_starts_with_nocase: String
  action_not_starts_with: String
  action_not_starts_with_nocase: String
  action_ends_with: String
  action_ends_with_nocase: String
  action_not_ends_with: String
  action_not_ends_with_nocase: String
  action_: OrchestratorAction_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Vote_filter]
  or: [Vote_filter]
}

enum Vote_orderBy {
  id
  timestamp
  by
  by__id
  by__bondHeld
  by__index
  by__status
  action
  action__id
  action__timestamp
  action__lastUpdated
  action__state
  action__status
  action__vault
  action__transactionHash
  action__hash
  action__gasUsed
}

type WhiteListManager {
  id: ID!
  address: String!
  vault: String!
  timestamp: BigInt!
  permission: WhiteListVaultPermission!
}

input WhiteListManager_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  permission_: WhiteListVaultPermission_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WhiteListManager_filter]
  or: [WhiteListManager_filter]
}

enum WhiteListManager_orderBy {
  id
  address
  vault
  timestamp
  permission
  permission__id
  permission__timestamp
  permission__updatedTimestamp
}

type WhiteListVaultPermission {
  id: ID!
  manager: WhiteListManager!
  vault: Vault!
  addresses: [String!]!
  timestamp: BigInt!
  updatedTimestamp: BigInt!
}

input WhiteListVaultPermission_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  manager: String
  manager_not: String
  manager_gt: String
  manager_lt: String
  manager_gte: String
  manager_lte: String
  manager_in: [String!]
  manager_not_in: [String!]
  manager_contains: String
  manager_contains_nocase: String
  manager_not_contains: String
  manager_not_contains_nocase: String
  manager_starts_with: String
  manager_starts_with_nocase: String
  manager_not_starts_with: String
  manager_not_starts_with_nocase: String
  manager_ends_with: String
  manager_ends_with_nocase: String
  manager_not_ends_with: String
  manager_not_ends_with_nocase: String
  manager_: WhiteListManager_filter
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  addresses: [String!]
  addresses_not: [String!]
  addresses_contains: [String!]
  addresses_contains_nocase: [String!]
  addresses_not_contains: [String!]
  addresses_not_contains_nocase: [String!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  updatedTimestamp: BigInt
  updatedTimestamp_not: BigInt
  updatedTimestamp_gt: BigInt
  updatedTimestamp_lt: BigInt
  updatedTimestamp_gte: BigInt
  updatedTimestamp_lte: BigInt
  updatedTimestamp_in: [BigInt!]
  updatedTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WhiteListVaultPermission_filter]
  or: [WhiteListVaultPermission_filter]
}

enum WhiteListVaultPermission_orderBy {
  id
  manager
  manager__id
  manager__address
  manager__vault
  manager__timestamp
  vault
  vault__id
  vault__deployer
  vault__token0
  vault__token1
  vault__totalAmount0
  vault__totalAmount1
  vault__createdAt
  vault__lastSnapshot
  vault__pool
  vault__state
  vault__annualPercentageYield
  vault__annualPercentageDailyYield
  vault__annualPercentageMonthlyYield
  vault__annualPercentageYearlyYield
  vault__lastTotalT0ValuePerLPT
  vault__accruedStrategistFees0
  vault__accruedStrategistFees1
  vault__fees0
  vault__fees1
  vault__beaconName
  vault__gasUsed
  vault__gasDeposited
  vault__totalLPTokensIssued
  vault__token1Symbol
  vault__decimals
  vault__feeTier
  vault__name
  vault__symbol
  vault__token0Balance
  vault__token0Decimals
  vault__token0Name
  vault__token0Symbol
  vault__token1Balance
  vault__token1Decimals
  vault__token1Name
  vault__payloadIpfs
  vault__vaultManager
  vault__averageFeeArrPerSecond
  vault__totalSnapshots
  vault__annualFeeARR
  vault__dailyFeeAPR
  vault__weeklyFeeAPR
  vault__totalValueLockedToken0
  vault__totalValueLockedToken1
  addresses
  timestamp
  updatedTimestamp
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}