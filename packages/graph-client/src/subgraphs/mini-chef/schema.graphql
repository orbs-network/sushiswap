"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"8 bytes signed integer\n"
scalar Int8

type MiniChef {
  id: ID!
  sushi: Bytes!
  sushiPerSecond: BigInt!
  totalAllocPoint: BigInt!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]
  poolCount: BigInt!
  timestamp: BigInt!
  block: BigInt!
}

input MiniChef_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sushi: Bytes
  sushi_not: Bytes
  sushi_gt: Bytes
  sushi_lt: Bytes
  sushi_gte: Bytes
  sushi_lte: Bytes
  sushi_in: [Bytes!]
  sushi_not_in: [Bytes!]
  sushi_contains: Bytes
  sushi_not_contains: Bytes
  sushiPerSecond: BigInt
  sushiPerSecond_not: BigInt
  sushiPerSecond_gt: BigInt
  sushiPerSecond_lt: BigInt
  sushiPerSecond_gte: BigInt
  sushiPerSecond_lte: BigInt
  sushiPerSecond_in: [BigInt!]
  sushiPerSecond_not_in: [BigInt!]
  totalAllocPoint: BigInt
  totalAllocPoint_not: BigInt
  totalAllocPoint_gt: BigInt
  totalAllocPoint_lt: BigInt
  totalAllocPoint_gte: BigInt
  totalAllocPoint_lte: BigInt
  totalAllocPoint_in: [BigInt!]
  totalAllocPoint_not_in: [BigInt!]
  pools_: Pool_filter
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MiniChef_filter]
  or: [MiniChef_filter]
}

enum MiniChef_orderBy {
  id
  sushi
  sushiPerSecond
  totalAllocPoint
  pools
  poolCount
  timestamp
  block
}

type NativeRewarderPool {
  id: ID!
  allocPoint: BigInt!
}

input NativeRewarderPool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  allocPoint: BigInt
  allocPoint_not: BigInt
  allocPoint_gt: BigInt
  allocPoint_lt: BigInt
  allocPoint_gte: BigInt
  allocPoint_lte: BigInt
  allocPoint_in: [BigInt!]
  allocPoint_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NativeRewarderPool_filter]
  or: [NativeRewarderPool_filter]
}

enum NativeRewarderPool_orderBy {
  id
  allocPoint
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pool {
  id: ID!
  miniChef: MiniChef!
  pair: Bytes!
  rewarder: Rewarder
  allocPoint: BigInt!
  lastRewardTime: BigInt!
  accSushiPerShare: BigInt!
  slpBalance: BigInt!
  users(skip: Int = 0, first: Int = 100, orderBy: User_orderBy, orderDirection: OrderDirection, where: User_filter): [User!]!
  userCount: BigInt!
  timestamp: BigInt!
  block: BigInt!
}

input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  miniChef: String
  miniChef_not: String
  miniChef_gt: String
  miniChef_lt: String
  miniChef_gte: String
  miniChef_lte: String
  miniChef_in: [String!]
  miniChef_not_in: [String!]
  miniChef_contains: String
  miniChef_contains_nocase: String
  miniChef_not_contains: String
  miniChef_not_contains_nocase: String
  miniChef_starts_with: String
  miniChef_starts_with_nocase: String
  miniChef_not_starts_with: String
  miniChef_not_starts_with_nocase: String
  miniChef_ends_with: String
  miniChef_ends_with_nocase: String
  miniChef_not_ends_with: String
  miniChef_not_ends_with_nocase: String
  miniChef_: MiniChef_filter
  pair: Bytes
  pair_not: Bytes
  pair_gt: Bytes
  pair_lt: Bytes
  pair_gte: Bytes
  pair_lte: Bytes
  pair_in: [Bytes!]
  pair_not_in: [Bytes!]
  pair_contains: Bytes
  pair_not_contains: Bytes
  rewarder: String
  rewarder_not: String
  rewarder_gt: String
  rewarder_lt: String
  rewarder_gte: String
  rewarder_lte: String
  rewarder_in: [String!]
  rewarder_not_in: [String!]
  rewarder_contains: String
  rewarder_contains_nocase: String
  rewarder_not_contains: String
  rewarder_not_contains_nocase: String
  rewarder_starts_with: String
  rewarder_starts_with_nocase: String
  rewarder_not_starts_with: String
  rewarder_not_starts_with_nocase: String
  rewarder_ends_with: String
  rewarder_ends_with_nocase: String
  rewarder_not_ends_with: String
  rewarder_not_ends_with_nocase: String
  rewarder_: Rewarder_filter
  allocPoint: BigInt
  allocPoint_not: BigInt
  allocPoint_gt: BigInt
  allocPoint_lt: BigInt
  allocPoint_gte: BigInt
  allocPoint_lte: BigInt
  allocPoint_in: [BigInt!]
  allocPoint_not_in: [BigInt!]
  lastRewardTime: BigInt
  lastRewardTime_not: BigInt
  lastRewardTime_gt: BigInt
  lastRewardTime_lt: BigInt
  lastRewardTime_gte: BigInt
  lastRewardTime_lte: BigInt
  lastRewardTime_in: [BigInt!]
  lastRewardTime_not_in: [BigInt!]
  accSushiPerShare: BigInt
  accSushiPerShare_not: BigInt
  accSushiPerShare_gt: BigInt
  accSushiPerShare_lt: BigInt
  accSushiPerShare_gte: BigInt
  accSushiPerShare_lte: BigInt
  accSushiPerShare_in: [BigInt!]
  accSushiPerShare_not_in: [BigInt!]
  slpBalance: BigInt
  slpBalance_not: BigInt
  slpBalance_gt: BigInt
  slpBalance_lt: BigInt
  slpBalance_gte: BigInt
  slpBalance_lte: BigInt
  slpBalance_in: [BigInt!]
  slpBalance_not_in: [BigInt!]
  users_: User_filter
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  miniChef
  miniChef__id
  miniChef__sushi
  miniChef__sushiPerSecond
  miniChef__totalAllocPoint
  miniChef__poolCount
  miniChef__timestamp
  miniChef__block
  pair
  rewarder
  rewarder__id
  rewarder__rewardToken
  rewarder__rewardPerSecond
  rewarder__totalAllocPoint
  rewarder__timestamp
  rewarder__block
  allocPoint
  lastRewardTime
  accSushiPerShare
  slpBalance
  users
  userCount
  timestamp
  block
}

type Query {
  miniChef(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MiniChef
  miniChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MiniChef_orderBy
    orderDirection: OrderDirection
    where: MiniChef_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MiniChef!]!
  pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  nativeRewarderPool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NativeRewarderPool
  nativeRewarderPools(
    skip: Int = 0
    first: Int = 100
    orderBy: NativeRewarderPool_orderBy
    orderDirection: OrderDirection
    where: NativeRewarderPool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NativeRewarderPool!]!
  rewarder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Rewarder
  rewarders(
    skip: Int = 0
    first: Int = 100
    orderBy: Rewarder_orderBy
    orderDirection: OrderDirection
    where: Rewarder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Rewarder!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Rewarder {
  id: ID!
  rewardToken: Bytes!
  rewardPerSecond: BigInt!
  totalAllocPoint: BigInt!
  timestamp: BigInt!
  block: BigInt!
}

input Rewarder_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_gt: Bytes
  rewardToken_lt: Bytes
  rewardToken_gte: Bytes
  rewardToken_lte: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  rewardPerSecond: BigInt
  rewardPerSecond_not: BigInt
  rewardPerSecond_gt: BigInt
  rewardPerSecond_lt: BigInt
  rewardPerSecond_gte: BigInt
  rewardPerSecond_lte: BigInt
  rewardPerSecond_in: [BigInt!]
  rewardPerSecond_not_in: [BigInt!]
  totalAllocPoint: BigInt
  totalAllocPoint_not: BigInt
  totalAllocPoint_gt: BigInt
  totalAllocPoint_lt: BigInt
  totalAllocPoint_gte: BigInt
  totalAllocPoint_lte: BigInt
  totalAllocPoint_in: [BigInt!]
  totalAllocPoint_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Rewarder_filter]
  or: [Rewarder_filter]
}

enum Rewarder_orderBy {
  id
  rewardToken
  rewardPerSecond
  totalAllocPoint
  timestamp
  block
}

type Subscription {
  miniChef(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MiniChef
  miniChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MiniChef_orderBy
    orderDirection: OrderDirection
    where: MiniChef_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MiniChef!]!
  pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  nativeRewarderPool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NativeRewarderPool
  nativeRewarderPools(
    skip: Int = 0
    first: Int = 100
    orderBy: NativeRewarderPool_orderBy
    orderDirection: OrderDirection
    where: NativeRewarderPool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NativeRewarderPool!]!
  rewarder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Rewarder
  rewarders(
    skip: Int = 0
    first: Int = 100
    orderBy: Rewarder_orderBy
    orderDirection: OrderDirection
    where: Rewarder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Rewarder!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"A string representation of microseconds UNIX timestamp (16 digits)\n"
scalar Timestamp

type User {
  id: ID!
  address: Bytes!
  pool: Pool
  amount: BigInt!
  rewardDebt: BigInt!
  sushiHarvested: BigInt!
  timestamp: BigInt!
  block: BigInt!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  rewardDebt: BigInt
  rewardDebt_not: BigInt
  rewardDebt_gt: BigInt
  rewardDebt_lt: BigInt
  rewardDebt_gte: BigInt
  rewardDebt_lte: BigInt
  rewardDebt_in: [BigInt!]
  rewardDebt_not_in: [BigInt!]
  sushiHarvested: BigInt
  sushiHarvested_not: BigInt
  sushiHarvested_gt: BigInt
  sushiHarvested_lt: BigInt
  sushiHarvested_gte: BigInt
  sushiHarvested_lte: BigInt
  sushiHarvested_in: [BigInt!]
  sushiHarvested_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  address
  pool
  pool__id
  pool__pair
  pool__allocPoint
  pool__lastRewardTime
  pool__accSushiPerShare
  pool__slpBalance
  pool__userCount
  pool__timestamp
  pool__block
  amount
  rewardDebt
  sushiHarvested
  timestamp
  block
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}